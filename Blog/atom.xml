<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李小争]]></title>
  <link href="http://www.citynight.cn/Blog/atom.xml" rel="self"/>
  <link href="http://www.citynight.cn/Blog/"/>
  <updated>2018-09-11T14:26:05+08:00</updated>
  <id>http://www.citynight.cn/Blog/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[CocaPods 添加头文件的报错failed to emit precompiled header 的解决办法]]></title>
    <link href="http://www.citynight.cn/Blog/15374224515215.html"/>
    <updated>2018-09-20T13:47:31+08:00</updated>
    <id>http://www.citynight.cn/Blog/15374224515215.html</id>
    <content type="html"><![CDATA[
<p>在buildsetting中的以下两个路径中添加对应的设置，重现编译即可解决，stackoverflow地址：<a href="https://stackoverflow.com/questions/45779591/failed-to-emit-precompiled-header-for-bridging-header?answertab=votes#tab-top">Failed to emit precompiled header for bridging header</a></p>

<pre><code class="language-text">Solution:
1 I added $(inherited) non-recursive to Search Path -&gt; Header Search Paths
2 Then added ${PODS_ROOT} recursive to Search Path -&gt; User Header Search Paths
Both the above in my projects&#39; target build settings.
</code></pre>

<p><img src="media/15374224515215/15374225919741.jpg" alt="" style="width:794px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[<禅与摩托车维修艺术>]]></title>
    <link href="http://www.citynight.cn/Blog/15366461063408.html"/>
    <updated>2018-09-11T14:08:26+08:00</updated>
    <id>http://www.citynight.cn/Blog/15366461063408.html</id>
    <content type="html"><![CDATA[
<p>生活处处都透露着哲学，作者从骑摩托车旅行的途中对事物进行了深入的思考。</p>

<h2 id="toc_0">关于·忙·</h2>

<p>书中这样写道：</p>

<blockquote>
<p>我们常常太忙而没有时间好好聊聊，结果日复一日地过着无聊的生活，单调乏味的日子让人几年后想起来不禁怀疑，究竟自己是怎么过的，而时间已悄悄溜走了。现在我们的确空下来了，我想谈一些我自己觉得颇为重要的事。</p>
</blockquote>

<h2 id="toc_1">关于·过程·</h2>

<blockquote>
<p>如果搭飞机抵达洛基山，你只会觉得景致很美，但是如果你是经过几天辛苦的旅程，通过这一片大草原，才抵达洛基山，那么你会从另一个角度来看它，那里仿佛是你的目标，是你的应许之地。</p>
</blockquote>

<p>我们的目标不应该仅仅是到达终点，旅途中的风景会让这个过程变得充实。我在记笔记的时候写的是“有过程的经历是印象深刻的”</p>

<h2 id="toc_2">关于·识人·</h2>

<blockquote>
<p>又钻进死胡同了。如果有人不懂心存感激，而你当面告诉他，那么你就等于是在骂他，这样你什么事都解决不了。<br/>
每个人的性格都是不一样的，需要针对不同的性格做出不同的处理方式。错误的处理方式只会加深矛盾</p>
</blockquote>

<h2 id="toc_3">关于·认知·</h2>

<blockquote>
<p>一名没有受过训练的旁观者只看到修理人员所付出的劳力，就以为他最主要的工作在于劳力。事实上，这正是他最轻松也是工作上最小的一部分，他最重要的工作就在于仔细观察和精确思考，这就是为什么技术人员往往显得沉默寡言，甚至在做实验的时候有些畏缩。他们不喜欢在做实验的时候讲话，那样就无法专心地思考问题了。他们借着实验推论出问题的结构，然后与心里正常的运作结构相比较，所以他们看到的是基本形式。</p>
</blockquote>

<p>隔行如隔山，拿程序员举例，其他人看到程序员噼里啪啦敲代码感觉这个人很厉害这其实是不对的。在敲代码之前的思考才是最重要的，敲代码只不过是把他思考的东西进行验证。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[framework脚本]]></title>
    <link href="http://www.citynight.cn/Blog/15345002536089.html"/>
    <updated>2018-08-17T18:04:13+08:00</updated>
    <id>http://www.citynight.cn/Blog/15345002536089.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-text">if [ &quot;${ACTION}&quot; = &quot;build&quot; ]

then

INSTALL_DIR=${SRCROOT}/Products/${PROJECT_NAME}.framework

DEVICE_DIR=${BUILD_ROOT}/${CONFIGURATION}-iphoneos/${PROJECT_NAME}.framework

SIMULATOR_DIR=${BUILD_ROOT}/${CONFIGURATION}-iphonesimulator/${PROJECT_NAME}.framework

SIMULATOR_SWIFT_MODULE_DIR=&quot;${SIMULATOR_DIR}/Modules/${PROJECT_NAME}.swiftmodule/*&quot;

INSTALL_SWIFT_MODULE_DIR=${INSTALL_DIR}/Modules/${PROJECT_NAME}.swiftmodule/

if [ -d &quot;${INSTALL_DIR}&quot; ]

then

rm -rf &quot;${INSTALL_DIR}&quot;

fi

mkdir -p &quot;${INSTALL_DIR}&quot;

cp -R &quot;${DEVICE_DIR}/&quot; &quot;${INSTALL_DIR}/&quot;

#ditto &quot;${DEVICE_DIR}/Headers&quot; &quot;${INSTALL_DIR}/Headers&quot;

lipo -create &quot;${DEVICE_DIR}/${PROJECT_NAME}&quot; &quot;${SIMULATOR_DIR}/${PROJECT_NAME}&quot; -output &quot;${INSTALL_DIR}/${PROJECT_NAME}&quot;

cp ${SIMULATOR_SWIFT_MODULE_DIR} &quot;${INSTALL_SWIFT_MODULE_DIR}&quot;

#open &quot;${DEVICE_DIR}&quot;

open &quot;${SRCROOT}/Products&quot;

fi
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView 第0的sectionHeaderView 不显示]]></title>
    <link href="http://www.citynight.cn/Blog/15336071866624.html"/>
    <updated>2018-08-07T09:59:46+08:00</updated>
    <id>http://www.citynight.cn/Blog/15336071866624.html</id>
    <content type="html"><![CDATA[
<p>只有当UITableView是Grouped样式，并且section的高度是通过sectionHeaderHeight设置的时候，第0个section的headerView才会丢失，通过代理设置不会丢失。如果UITableView是Plain样式就不会有任何问题。</p>

<p>下面是不显示第0个sectionHeaderView的情况<br/>
<img src="media/15336071866624/15336074512241.jpg" alt="" style="width:1406px;"/></p>

<p>正常显示<br/>
<img src="media/15336071866624/15336075291692.jpg" alt="" style="width:1394px;"/><br/>
在正常显示的时候明显感觉到第0个section上面有间距，真机没有测试。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[控制器透明，WebView透明]]></title>
    <link href="http://www.citynight.cn/Blog/15323970557540.html"/>
    <updated>2018-07-24T09:50:55+08:00</updated>
    <id>http://www.citynight.cn/Blog/15323970557540.html</id>
    <content type="html"><![CDATA[
<p>设置控制器透明</p>

<pre><code class="language-text">let vc = AfterOrderPotADViewController()
self.definesPresentationContext = true
vc.modalPresentationStyle = .overCurrentContext
vc.view.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.3)
self.present(vc, animated: false, completion: nil)
</code></pre>

<p>webView 设置透明</p>

<pre><code class="language-text">webView.backgroundColor = UIColor.clear
webView.isOpaque = false
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法总结]]></title>
    <link href="http://www.citynight.cn/Blog/15323249439841.html"/>
    <updated>2018-07-23T13:49:03+08:00</updated>
    <id>http://www.citynight.cn/Blog/15323249439841.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Fibonacci （斐波那契数列实现）</h2>

<pre><code class="language-text">///Fibonacci （斐波那契数列实现）
func fibonacci(_ n: Int) -&gt; Int{
    let result = [0,1]
    if n &lt; 2 {
        return result[n]
    }
    
    var fibNMinusOne = 1
    var fibNMinusTwo = 0
    var fibN = 0
    
    for _ in 2...n {
        fibN = fibNMinusOne + fibNMinusTwo
        fibNMinusTwo = fibNMinusOne
        fibNMinusOne = fibN
    }
    return fibN
}
</code></pre>

<h2 id="toc_1">BinarySearch (二分查找)</h2>

<h3 id="toc_2">非递归</h3>

<pre><code class="language-text">func binarySearch&lt;T: Comparable&gt;(_ a:[T], key: T) -&gt; Int {
    print(key)
    var lowerBound = 0
    var upperBound = a.count
    while lowerBound &lt; upperBound {

        let midIndex = lowerBound + (upperBound - lowerBound)/2

        if a[midIndex] == key {
            return midIndex
        }else if a[midIndex] &lt; key {
            lowerBound = midIndex + 1
        }else {
            upperBound = midIndex
        }
    }
    return -1
}
</code></pre>

<h3 id="toc_3">递归</h3>

<pre><code class="language-text">func binarySearch&lt;T : Comparable&gt;(startIndex: Int, endIndex: Int , arr:[T], key: T) -&gt; Int{
    let mind = startIndex + (endIndex - startIndex) / 2
    let mindValue = arr[mind]
    if mindValue == key {
        return mind
    }
    if mindValue &lt; key {
        return binarySearch(startIndex: mind + 1, endIndex: endIndex, arr: arr, key: key)
    } else if mindValue &gt; key {
        return binarySearch(startIndex: 0, endIndex: mind, arr: arr, key: key)
    }
    return -1
}
</code></pre>

<h2 id="toc_4">快速排序</h2>

<pre><code class="language-text">func quicksort&lt;T: Comparable&gt;(_ unsort:[T]) -&gt; [T] {
    guard unsort.count &gt; 1 else {
        return unsort
    }
    
    let pivot = unsort[unsort.count / 2]
    let less = unsort.filter { $0 &lt; pivot }
    let equal = unsort.filter { $0 == pivot }
    let greater = unsort.filter { $0 &gt; pivot }
    
    return quicksort(less) + equal + quicksort(greater)
}
</code></pre>

<p>测试结果</p>

<pre><code class="language-text">let list = [ 10, 0, 3, 9, 2, 14, 8, 27, 1, 5, 8, -1, 26 ]

print(list)
print(quicksort(list))
--------------------
[10, 0, 3, 9, 2, 14, 8, 27, 1, 5, 8, -1, 26]
[-1, 0, 1, 2, 3, 5, 8, 8, 9, 10, 14, 26, 27]

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决UILabel 末尾的空格被忽略]]></title>
    <link href="http://www.citynight.cn/Blog/15319018166027.html"/>
    <updated>2018-07-18T16:16:56+08:00</updated>
    <id>http://www.citynight.cn/Blog/15319018166027.html</id>
    <content type="html"><![CDATA[
<p>看到这篇文章<a href="https://www.lidaren.com/archives/1333">UILabel取消自动Trim空格和换行等空白字符</a></p>

<pre><code class="language-text">UILabel会自动清除的空白字符（UNICODE）
\u0009 CHARACTER TABULATION
\u000A LINE FEED
\u000D CARRIAGE RETURN
\u0020 SPACE
\u0085 NEXT LINE
\u00A0 NBSP
\u1680 OGHAM SPACE MARK
\u180E MONGOLIAN VOWEL SEPARATOR
\u2000 EN QUAD
\u200A HAIR SPACE
\u200B ZERO WIDTH SPACE
\u2028 LINE SEPARATOR
\u2029 PARAGRAPH SEPARATOR
\u202F NARROW NO-BREAK SPACE
\u205F MEDIUM MATHEMATICAL SPACE
\u3000 IDEOGRAPHIC SPACE
</code></pre>

<p>解决方案</p>

<pre><code class="language-text">    let paragraphStyle = NSMutableParagraphStyle()
    paragraphStyle.alignment = .right
    paragraphStyle.tailIndent = -10
    let myMutableString = NSMutableAttributedString(
        string: text,
        attributes: [
            NSAttributedStringKey.font: UIFont.systemFont(ofSize: 16),
            NSAttributedStringKey.paragraphStyle: paragraphStyle
        ]
    )
    label.attributedText = myMutableString
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图片加载方式]]></title>
    <link href="http://www.citynight.cn/Blog/15299939008214.html"/>
    <updated>2018-06-26T14:18:20+08:00</updated>
    <id>http://www.citynight.cn/Blog/15299939008214.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15299939008214/15299939112098.jpg" alt=""/><br/>
<img src="media/15299939008214/15299939172785.jpg" alt=""/></p>

<p>图像的降采样</p>

<p>不要使用昂贵的UIImage：UIImage会解压原始的图片占用大量的内存<br/>
内部的坐标变换也非常昂贵</p>

<p>使用ImageIO的CGImageSourceCreateThumbnailAtIndex API: 无视原始图片尺寸，resize的内存开销只是目标尺寸（请看Session中后半部分的Demo）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[金额显示]]></title>
    <link href="http://www.citynight.cn/Blog/15271249936113.html"/>
    <updated>2018-05-24T09:23:13+08:00</updated>
    <id>http://www.citynight.cn/Blog/15271249936113.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-text">//初始化NumberFormatter
let format = NumberFormatter()
//设置numberStyle（有多种格式）
format.numberStyle = .decimal
//转换后的string
let string = format.string(from: NSNumber(value: 1234567.89))
//打印
print(string)  //1,234,567.89

//显示样式和输出样式
numberStyle:
public enum Style : UInt {  

        case none //1234567.89

        case decimal //1,234,567.89

        case currency //￥1,234,567.89

        case percent //123,456,789%

        case scientific //1.23456789E6

        case spellOut //一百二十三万四千五百六十七点八九

        @available(iOS 9.0, *)
        case ordinal //第123,4568

        @available(iOS 9.0, *)
        case currencyISOCode //CNY1,234,567.89

        @available(iOS 9.0, *)
        case currencyPlural//1,234,567.89人民币

        @available(iOS 9.0, *)
        case currencyAccounting//￥1,234,567.89
    }

//输入123456789分别输出
// 123456789
// 123,456,789
//￥123,456,789.00
//12345678900%
//1.23456789E8
//一亿二千三百四十五万六千七百八十九
//第1,2345,6789
//CNY123,456,789.00
//123,456,789.00人民币
//￥123,456,789.00
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程需要注意的问题]]></title>
    <link href="http://www.citynight.cn/Blog/15257017136249.html"/>
    <updated>2018-05-07T22:01:53+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257017136249.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">死锁（Dead Lock）</h2>

<p>第一种情况：</p>

<pre><code class="language-text">let serialQueue = DispatchQueue(label:&quot;test&quot;)
serialQueue.async {
    //.....
    serialQueue.sync {
        //...
    }
}

</code></pre>

<p>第二种情况：</p>

<pre><code class="language-text">let operationA = Operation()
let operationB = Operation()
operationA.addDependency(operationB)
operationB.addDependency(operationA)

</code></pre>

<p>怎样避免死锁：</p>

<ol>
<li>少用依赖</li>
<li>慎用同步</li>
</ol>

<h2 id="toc_1">优先倒置（Priority Inversion）</h2>

<pre><code class="language-text">var highPriorityQueue = DispatchQueue.global(qos: .userInitiated)
var lowPriorityQueue = DispatchQueue.global(qos: .utility)

let semaphore = DispatchSemaphore(value: 1)

lowPriorityQueue.async {
    semaphore.wait()
    for i in 0...10 {
        print(i)
    }
    semaphore.signal()
}

highPriorityQueue.async {
    semaphore.wait()
    for i in 11...20 {
        print(1)
    }
}

</code></pre>

<p>解决办法：<br/>
同一个资源用同一个Qos</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 应用图标没有在launchpad里显示]]></title>
    <link href="http://www.citynight.cn/Blog/15257016488742.html"/>
    <updated>2018-05-07T22:00:48+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257016488742.html</id>
    <content type="html"><![CDATA[
<p>重置Launchpad</p>

<pre><code class="language-text">rm ~/Library/Application\ Support/Dock/*.db

</code></pre>

<pre><code class="language-text">killall Dock
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carthage 不能正常更新]]></title>
    <link href="http://www.citynight.cn/Blog/15257016195473.html"/>
    <updated>2018-05-07T22:00:19+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257016195473.html</id>
    <content type="html"><![CDATA[
<p>报错</p>

<pre><code class="language-text">➜  PersonalMusic git:(master) carthage update
*** Cloning GCDWebServer
A shell task (/usr/bin/env git clone --bare --quiet https://github.com/swisspol/GCDWebServer.git /Users/lixzzzzzz/Library/Caches/org.carthage.CarthageKit/dependencies/GCDWebServer) failed with exit code 128:
fatal: unable to access &#39;https://github.com/swisspol/GCDWebServer.git/&#39;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443

</code></pre>

<p>解决办法：</p>

<p>清缓存</p>

<pre><code class="language-text">rm -rf ~/Library/Caches/org.carthage.CarthageKit
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置placeholder颜色]]></title>
    <link href="http://www.citynight.cn/Blog/15257015417604.html"/>
    <updated>2018-05-07T21:59:01+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257015417604.html</id>
    <content type="html"><![CDATA[
<p>从前设置颜色可能是这样的：</p>

<pre><code class="language-text">self.textField.setValue(UIColor.white, forKeyPath: &quot;_placeholderLabel.textColor&quot;)

</code></pre>

<p>今天发现，居然有一个属性可以设置：</p>

<pre><code class="language-text">self.textField.attributedPlaceholder =
            NSAttributedString(string: &quot;自定义金额&quot;,
                               attributes:
                [NSAttributedStringKey.foregroundColor: UIColor.white]
        )

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[懒加载的另一种写法]]></title>
    <link href="http://www.citynight.cn/Blog/15257015215231.html"/>
    <updated>2018-05-07T21:58:41+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257015215231.html</id>
    <content type="html"><![CDATA[
<p>原先我一直这样写：</p>

<pre><code class="language-text">    private lazy var imageView: UIImageView = {
        let imageView = UIImageView(image: UIImage(named: &quot;placeholder&quot;))
        imageView.contentMode = .center
        return imageView
    }()

</code></pre>

<p>今天看到了另一种比较简洁的写法</p>

<pre><code class="language-text">private lazy var imageView: UIImageView = {
        $0.contentMode = .center
        return $0
    }(UIImageView())

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cell点击时多次Push]]></title>
    <link href="http://www.citynight.cn/Blog/15257014756710.html"/>
    <updated>2018-05-07T21:57:55+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257014756710.html</id>
    <content type="html"><![CDATA[
<p><a href="https://stackoverflow.com/questions/5687991/uitableview-didselectrowatindexpath-called-twice">stackoverflow上面的解决方案</a></p>

<pre><code class="language-text">func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {

    tableView.deselectRowAtIndexPath(indexPath, animated: true)

    if let navigationController = navigationController {
        guard navigationController.topViewController == self else {
            return
        }
    }
}

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[防止Timer 与控制器耦合导致控制器不释放]]></title>
    <link href="http://www.citynight.cn/Blog/15180682554389.html"/>
    <updated>2018-02-08T13:37:35+08:00</updated>
    <id>http://www.citynight.cn/Blog/15180682554389.html</id>
    <content type="html"><![CDATA[
<p>在<code>OC</code>中可以使用<code>NSProxy</code> 的转发机制防止timer强引用<br/>
具体例子可以参考<a href="https://github.com/ibireme/YYKit/blob/3869686e0e560db0b27a7140188fad771e271508/YYKit/Utility/YYWeakProxy.h">YYKit</a>中的处理方式,代码如下：</p>

<pre><code class="language-text">#import &quot;YYWeakProxy.h&quot;


@implementation YYWeakProxy

- (instancetype)initWithTarget:(id)target {
    _target = target;
    return self;
}

+ (instancetype)proxyWithTarget:(id)target {
    return [[YYWeakProxy alloc] initWithTarget:target];
}

- (id)forwardingTargetForSelector:(SEL)selector {
    return _target;
}

- (void)forwardInvocation:(NSInvocation *)invocation {
    void *null = NULL;
    [invocation setReturnValue:&amp;null];
}

- (NSMethodSignature *)methodSignatureForSelector:(SEL)selector {
    return [NSObject instanceMethodSignatureForSelector:@selector(init)];
}

- (BOOL)respondsToSelector:(SEL)aSelector {
    return [_target respondsToSelector:aSelector];
}

- (BOOL)isEqual:(id)object {
    return [_target isEqual:object];
}

- (NSUInteger)hash {
    return [_target hash];
}

- (Class)superclass {
    return [_target superclass];
}

- (Class)class {
    return [_target class];
}

- (BOOL)isKindOfClass:(Class)aClass {
    return [_target isKindOfClass:aClass];
}

- (BOOL)isMemberOfClass:(Class)aClass {
    return [_target isMemberOfClass:aClass];
}

- (BOOL)conformsToProtocol:(Protocol *)aProtocol {
    return [_target conformsToProtocol:aProtocol];
}

- (BOOL)isProxy {
    return YES;
}

- (NSString *)description {
    return [_target description];
}

- (NSString *)debugDescription {
    return [_target debugDescription];
}
</code></pre>

<p>在Swift中怎么处理？王巍的<a href="https://gist.github.com/onevcat/2d1ceff1c657591eebde">Gist</a>中写了一种</p>

<pre><code class="language-text">private class Block&lt;T&gt; {
    let f : T
    init (_ f: T) { self.f = f }
}

extension NSTimer {
    static func xxx_scheduledTimerWithTimeInterval(ti: NSTimeInterval, block: ()-&gt;(), repeats: Bool) -&gt; NSTimer {
        return self.scheduledTimerWithTimeInterval(ti, target:
            self, selector: &quot;xxx_blcokInvoke:&quot;, userInfo: Block(block), repeats: repeats)
    }
    
    static func xxx_blcokInvoke(timer: NSTimer) {
        if let block = timer.userInfo as? Block&lt;()-&gt;()&gt; {
            block.f()
        }
    }
}
</code></pre>

<p>当然还有其他的方式比如：<a href="https://stackoverflow.com/questions/44096793/how-to-set-cadisplaylink-in-swift-with-weak-reference-between-target-and-cadispl">How to set CADisplayLink in Swift with weak reference between target and CADisplayLink instance<br/>
</a> 等等。。。</p>

<p>目前公司项目中采用的方式如下：</p>

<pre><code class="language-text">class WeakTimer: NSObject {
    
    private weak var target: NSObject?
    private weak var timer: Timer?
    private var selector: Selector
    
    private var userInfo: Any?
    
    init(withTimeInterval ti: TimeInterval, target aTarget: NSObject, selector aSelector: Selector, userInfo: Any?, repeats yesOrNo: Bool) {
        self.target = aTarget
        self.selector = aSelector
        self.userInfo = userInfo
        super.init()
        timer = Timer.scheduledTimer(timeInterval: ti, target: self, selector: #selector(test), userInfo: userInfo, repeats: yesOrNo)
    }
    
    @objc private func test() {
        target?.perform(selector, with: self.userInfo, afterDelay: 0)
    }
    
    open class func scheduledTimer(timeInterval ti: TimeInterval, target aTarget: NSObject, selector aSelector: Selector, userInfo: Any?, repeats yesOrNo: Bool) -&gt; WeakTimer {
        let weakTimer = WeakTimer(withTimeInterval: ti, target: aTarget, selector: aSelector, userInfo: userInfo, repeats: yesOrNo)
        
        return weakTimer
    }
    
    open func invalidate() {
        timer?.invalidate()
    }
}
</code></pre>

<p>应用</p>

<pre><code class="language-text">    @objc private func dismissSelf() {
        self.weakTimer?.invalidate()
        self.weakTimer = nil
        // HHTSwitchGlobalData.shared.waiterLoginTimeOut
        self.weakTimer = WeakTimer.scheduledTimer(timeInterval: HHTSwitchGlobalData.shared.waiterLoginTimeOut, target: self, selector: #selector(autoDismiss), userInfo: nil, repeats: true)
    }
</code></pre>

<p>第三方库 Kingfisher 中的处理办法</p>

<pre><code class="language-text">    /// Proxy object for prevending a reference cycle between the CADDisplayLink and AnimatedImageView.
    class TargetProxy {
        private weak var target: AnimatedImageView?
        
        init(target: AnimatedImageView) {
            self.target = target
        }
        
        @objc func onScreenUpdate() {
            target?.updateFrame()
        }
    }
</code></pre>

<p>应用:</p>

<pre><code class="language-text">private lazy var displayLink: CADisplayLink = {
        self.isDisplayLinkInitialized = true
        let displayLink = CADisplayLink(target: TargetProxy(target: self), selector: #selector(TargetProxy.onScreenUpdate))
        displayLink.add(to: .main, forMode: self.runLoopMode)
        displayLink.isPaused = true
        return displayLink
    }()
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[显示中划线,下划线]]></title>
    <link href="http://www.citynight.cn/Blog/15166722537296.html"/>
    <updated>2018-01-23T09:50:53+08:00</updated>
    <id>http://www.citynight.cn/Blog/15166722537296.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">OC中显示</h3>

<h5 id="toc_1">添加中划线:</h5>

<pre><code class="language-text">  UILabel * strikeLabel = [[UILabel alloc] initWithFrame:(CGRectMake(10, 10, 50, 30))];
  NSString *textStr = [NSString stringWithFormat:@&quot;%@元&quot;, primeCost];

  //中划线
  NSDictionary *attribtDic = @{NSStrikethroughStyleAttributeName: [NSNumber numberWithInteger:NSUnderlineStyleSingle]};
  NSMutableAttributedString *attribtStr = [[NSMutableAttributedString alloc]initWithString:textStr attributes:attribtDic];

  // 赋值
  strikeLabel.attributedText = attribtStr;

  [self.view addSubview:strikeLabel];
</code></pre>

<h5 id="toc_2">添加下划线:</h5>

<pre><code class="language-text">  UILabel *underlineLabel = [[UILabel alloc] initWithFrame:(CGRectMake(10, 10, 50, 30))];
  NSString *textStr = [NSString stringWithFormat:@&quot;%@元&quot;, primeCost];

  // 下划线
  NSDictionary *attribtDic = @{NSUnderlineStyleAttributeName: [NSNumber numberWithInteger:NSUnderlineStyleSingle]};
  NSMutableAttributedString *attribtStr = [[NSMutableAttributedString alloc]initWithString:textStr attributes:attribtDic];

  //赋值
  underlineLabel.attributedText = attribtStr;

  [self.view addSubview:underlineLabel];
</code></pre>

<h3 id="toc_3">Swift中显示</h3>

<pre><code class="language-text">let myAttributes: [NSAttributedStringKey : Any] = [NSAttributedStringKey.strikethroughStyle: NSUnderlineStyle.styleSingle.rawValue]
            
let attributedText = NSAttributedString(string: &quot;被划线文字&quot;, attributes: myAttributes)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftTips - 集中处理]]></title>
    <link href="http://www.citynight.cn/Blog/15158138774013.html"/>
    <updated>2018-01-13T11:24:37+08:00</updated>
    <id>http://www.citynight.cn/Blog/15158138774013.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">集中处理@objc</h2>

<p><img src="media/15158138774013/WX20180113-112401@2x.png" alt="WX20180113-112401@2x"/></p>

<h2 id="toc_1">模拟器不能执行的代码单独处理</h2>

<p><img src="media/15158138774013/15159872783257.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[企业证书需要]]></title>
    <link href="http://www.citynight.cn/Blog/15132354899270.html"/>
    <updated>2017-12-14T15:11:29+08:00</updated>
    <id>http://www.citynight.cn/Blog/15132354899270.html</id>
    <content type="html"><![CDATA[
<ol>
<li>邓白氏码  不清楚公司是否申请过,如果没有申请过可能需要半个月左右时间(最快1周)</li>
<li>申请企业证书, 现在苹果对国内企业证书申请比较严格最快1周可能需要半个月甚至更久(美国快过圣诞节和元旦了)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Runloop 遇到的问题]]></title>
    <link href="http://www.citynight.cn/Blog/15101967456310.html"/>
    <updated>2017-11-09T11:05:45+08:00</updated>
    <id>http://www.citynight.cn/Blog/15101967456310.html</id>
    <content type="html"><![CDATA[
<p>首先: <code>swift</code> 与 <code>C</code> 兼容不如 <code>OC</code> </p>

<ol>
<li>生成<code>CFRunLoopObserverContext</code>比<code>OC</code>艰难好多...</li>
</ol>

<pre><code class="language-text">func addRunloopObserver() {
        autoreleasepool {
            guard let runloop = CFRunLoopGetCurrent() else {return}
            let unmanaged = Unmanaged.passRetained(self)
            let uptr = unmanaged.toOpaque()
            let vptr = UnsafeMutableRawPointer(uptr)
            var content = CFRunLoopObserverContext(version: 0, info: vptr, retain: nil, release: nil, copyDescription: nil)
            guard let obserber = CFRunLoopObserverCreate(kCFAllocatorDefault, CFRunLoopActivity.beforeWaiting.rawValue, true, Int.max - 999, observerCallbackFunc(), &amp;content) else {return}
            CFRunLoopAddObserver(runloop, obserber, CFRunLoopMode.defaultMode)
        }
    }
</code></pre>

<p>注意 content ,真是比OC复杂啊</p>

<ol>
<li>强转也变了...</li>
</ol>

<pre><code class="language-text">func observerCallbackFunc() -&gt; CFRunLoopObserverCallBack {
        
        return {(observer, activity, context) -&gt; Void in
            guard let context = context else {
                return
            }
            let work = Unmanaged&lt;RunLoopWorker&gt;.fromOpaque(context).takeUnretainedValue()
            
            if work.tasks.count == 0 { return }
            var result = false
            while result == false &amp;&amp; work.tasks.count &gt; 0 {
                // 取出任务
                if let unit = work.tasks.first,unit.values.count &gt; 0 {
                    result = unit.values.first!()
                    work.tasks.removeFirst()
                }
            }
        }
    }
</code></pre>

]]></content>
  </entry>
  
</feed>
