<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李小争]]></title>
  <link href="http://www.citynight.cn/Blog/atom.xml" rel="self"/>
  <link href="http://www.citynight.cn/Blog/"/>
  <updated>2018-10-13T15:09:31+08:00</updated>
  <id>http://www.citynight.cn/Blog/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[关于更换主题]]></title>
    <link href="http://www.citynight.cn/Blog/15393255857280.html"/>
    <updated>2018-10-12T14:26:25+08:00</updated>
    <id>http://www.citynight.cn/Blog/15393255857280.html</id>
    <content type="html"><![CDATA[
<p>今天刷Github，看到一个开源App <a href="https://github.com/weiran/Hackers">Hackers</a>源码里面关于更换主题写的挺好的。</p>

<p>原先我的想法就是切换语言和更新主题发送个通知就好了，然后每个页面都监听下这个通知。<br/>
但是这个项目里面采用的是每个控制器都注册下，然后当更换主题时把所有注册的控制器都更新下主题<br/>
可以看下<a href="https://github.com/weiran/Hackers/tree/master/Client/Themes">这部分代码</a><br/>
在<code>Theming.swift</code>文件中定义了<code>ThemeProvider</code> 和 <code>Themed</code>协议</p>

<pre><code class="language-text">/// Describes a type that holds a current `Theme` and allows
/// an object to be notified when the theme is changed.
protocol ThemeProvider {
    /// Placeholder for the theme type that the app will use
    associatedtype Theme
    
    /// The current theme that is active
    var currentTheme: Theme { get }
    
    /// Subscribe to be notified when the theme changes. Handler will be
    /// remove from subscription when `object` is deallocated.
    func subscribeToChanges(_ object: AnyObject, handler: @escaping (Theme) -&gt; Void)
}

/// Describes a type that can have a theme applied to it
protocol Themed {
    /// A Themed type needs to know about what concrete type the
    /// ThemeProvider is. So we don&#39;t clash with the protocol,
    /// let&#39;s call this associated type _ThemeProvider
    associatedtype _ThemeProvider: ThemeProvider
    
    /// Return the current app-wide theme provider
    var themeProvider: _ThemeProvider { get }
    
    /// This will be called whenever the current theme changes
    func applyTheme(_ theme: _ThemeProvider.Theme)
}

extension Themed where Self: AnyObject {
    /// This is to be called once when Self wants to start listening for
    /// theme changes. This immediately triggers `applyTheme()` with the
    /// current theme.
    func setupTheming() {
        applyTheme(themeProvider.currentTheme)
        themeProvider.subscribeToChanges(self) { [weak self] newTheme in
            self?.applyTheme(newTheme)
        }
    }
}
</code></pre>

<p>根据协议可以如下操作：</p>

<pre><code class="language-text">final class AppThemeProvider: ThemeProvider {
    static let shared: AppThemeProvider = .init()
    
    private var theme: SubscribableValue&lt;AppTheme&gt;
    private var availableThemes: [AppTheme] = [.light, .dark]
    
    var currentTheme: AppTheme {
        get {
            return theme.value
        }
        set {
            setNewTheme(newValue)
        }
    }
    
    init() {
        theme = SubscribableValue&lt;AppTheme&gt;(value: .light)
    }
    
    private func setNewTheme(_ newTheme: AppTheme) {
        let window = UIApplication.shared.delegate!.window!!
        UIView.transition(
            with: window,
            duration: 0.3,
            options: [UIView.AnimationOptions.transitionCrossDissolve],
            animations: {
                self.theme.value = newTheme
        },
            completion: nil
        )
    }
    
    func subscribeToChanges(_ object: AnyObject, handler: @escaping (AppTheme) -&gt; Void) {
        theme.subscribe(object, using: handler)
    }
    
    func nextTheme() {
        guard let nextTheme = availableThemes.rotate() else {
            return
        }
        currentTheme = nextTheme
    }
}

extension Themed where Self: AnyObject {
    var themeProvider: AppThemeProvider {
        return AppThemeProvider.shared
    }
}
</code></pre>

<p>具体主题的颜色见<code>Theme.swift</code></p>

<p>由上面的实例我们知道所有页面都是被暂存的，暂存操作为</p>

<pre><code class="language-text">private var theme: SubscribableValue&lt;AppTheme&gt;
</code></pre>

<p>SubscribableValue的具体实现见<code>SubscribableValue.swift</code>，这个结构是一个结构体,如下：</p>

<pre><code class="language-text">/// Stores a value of type T, and allows objects to subscribe to
/// be notified with this value is changed.
struct SubscribableValue&lt;T&gt; {
    private typealias Subscription = (object: Weak&lt;AnyObject&gt;, handler: (T) -&gt; Void)

    private var subscriptions: [Subscription] = []

    var value: T {
        didSet {
            for (object, handler) in subscriptions where object.value != nil {
                handler(value)
            }
        }
    }

    init(value: T) {
        self.value = value
    }

    mutating func subscribe(_ object: AnyObject, using handler: @escaping (T) -&gt; Void) {
        subscriptions.append((Weak(value: object), handler))
        cleanupSubscriptions()
    }

    /// Removes any subscriptions where the object has been deallocated
    /// and no longer exists
    private mutating func cleanupSubscriptions() {
        subscriptions = subscriptions.filter({ entry in
            return entry.object.value != nil
        })
    }
}
</code></pre>

<p>上面的weak的实现为</p>

<pre><code class="language-text">/// A box that allows us to weakly hold on to an object
struct Weak&lt;Object: AnyObject&gt; {
    weak var value: Object?
}
</code></pre>

<p>每个需要更换主题的控制器或者视图都会注册一下，<br/>
<img src="media/15393255857280/15394143263288.jpg" alt="" style="width:1680px;"/></p>

<p><img src="media/15393255857280/15394143483076.jpg" alt="" style="width:1680px;"/></p>

<p><img src="media/15393255857280/15394143927777.jpg" alt="" style="width:1680px;"/></p>

<p>这个就是协议的默认实现，然后会把当前对象注册一下。<br/>
每次赋值的时候都会更新一下所有注册的视图。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[公司规范]]></title>
    <link href="http://www.citynight.cn/Blog/15380500153174.html"/>
    <updated>2018-09-27T20:06:55+08:00</updated>
    <id>http://www.citynight.cn/Blog/15380500153174.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Git分支建议</h2>

<blockquote>
<p>开发必读<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">http://www.ruanyifeng.com/blog/2012/07/git.html</a></p>

<p>多提交，少推送。</p>

<h5 id="toc_1">严格遵守：</h5>

<p>填写本次修改内容</p>

<p>代码合并必须命令行合并，并且加上--no-ff参数。（文章中有详细介绍）</p>

<p>将 <strong>feature/develop_wangchao_打印bug</strong> 分支合并到当前分支命令如下：</p>

<p>git merge --no-ff feature/develop_wangchao_打印bug</p>
</blockquote>

<h5 id="toc_2">与文章中的差异：</h5>

<blockquote>
<p>所有问题由组长来定属于紧急问题，还是特性问题。</p>

<blockquote>
<p>紧急问题上线流程：预发布分支--&gt;生产分支。</p>

<p>特性问题上线流程：开发分支--&gt;预发布分支--&gt;生产分支。（<strong>预发布分支</strong> 从 <strong>生产分支</strong> 拉取）</p>
</blockquote>

<p><strong>预发布分支</strong> 的的问题按照bug分支处理。</p>

<blockquote>
<p>步骤：从 <strong>预发布分支</strong> 拉取bug分支，修改完成后合并到 <strong>预发布分支</strong> ，测试通过后 <strong>预发布分支</strong> 合并到 <strong>生产分支</strong> ，在生产分支打上和 <strong>预发布分支</strong> 名称一样的标签， <strong>预发布分支</strong> 删除，<strong>bug分支</strong> 删除。</p>
</blockquote>

<p>生产环境紧急问题和bug，按照bug分支处理，步骤参考 <strong>预发布分支</strong> bug处理方式。</p>

<p>推荐git图形界面mac用sourcetree，windows用git tortoise，可以清晰看到提交记录图和提交人。</p>

<p>注意：生产分支、预发布分支分别2人有修改权限，负责代码合并，预发布分支合并到生产分支时，需要看git提交记录图，所有修改人员必须签字，说明修改部分关联的项目，分支权限定期抽查。</p>
</blockquote>

<h5 id="toc_3">建议分支命名：</h5>

<blockquote>
<p>云端：</p>

<blockquote>
<pre><code class="language-text">|----master                                         生产分支
|----release                                        预发布分支文件夹
        |----master20180915                         预发布分支
|----develop                                        开发分支
|----feature                                        个人分支文件夹
        |----develop_wangchao_会员结账               具体个人分支
        |----develop_shaochuanjun_微信结账           具体个人分支
|----fixbug                                         bug分支文件夹
        |----master20180915_wangchao_扫码点餐bug     具体个人bug分支
        |----master20180915_shaochuanjun_点菜bug     具体个人bug分支
</code></pre>

<p>能够直观看到个人分支的源分支（从哪个分支拉取的）。</p>

<p>feature、fixbug下的分支不允许跨源合并、跨源拉取（develop_开头的分支只能合并到develop，只能拉取develop分支），release下的分支除外。</p>

<p>实际上bug分支可以往预发布、开发分支合并，简单起见我们禁止跨源合并</p>

<p>release下的分支每次合并到master时要并行合并到develop分支。</p>
</blockquote>

<p>门店：（由于shop、shop-print和海底捞一套代码比较特殊，建议和云端命名方式一样，加上前缀文件夹huoguo或haidilao）</p>

<blockquote>
<p>hht-manage属于新火锅特有项目，建议按照云端命名基础上增加版本号。</p>

<pre><code class="language-text">|----master_v1                                         生产分支
|----master_v2                                         生产分支
|----release                                        预发布分支文件夹
        |----master_v1_20180915                         预发布分支
        |----master_v2_20180915                         预发布分支
|----develop                                        开发分支
|----feature                                        个人分支文件夹
        |----develop_wangchao_会员结账               具体个人分支
        |----develop_shaochuanjun_微信结账           具体个人分支
|----fixbug                                         bug分支文件夹
        |----master20180915_wangchao_扫码点餐bug     具体个人bug分支
        |----master20180915_shaochuanjun_点菜bug     具体个人bug分支
</code></pre>
</blockquote>

<p><strong>举例：</strong></p>

<blockquote>
<p>小A要做一个新功能的步骤：</p>

<p>1、找组长确认属于什么类型问题 ----&gt; 2、属于特性问题 ----&gt; 3、从 <strong>develop</strong> 拉取分支 <strong>feature/develop_A_打印功能</strong> ----&gt; 4、修改完成后--no-ff合并到 <strong>develop</strong> 分支测试 ----&gt; 5、测试通过后找组长从生产分支拉取预发布分支 <strong>release/master20180919</strong> ，把生产环境的数据库备份到预发布环境 ----&gt; 6、组长把 <strong>feature/develop</strong> 合并到 <strong>release/master20180919</strong> ----&gt; 7、开发整理所有预发布环境没有的脚本交给组长 ----&gt; 8、组长存档 <strong>master20180919.sql</strong> 后交给运维执行 ----&gt; 9、测试通过后组长把 <strong>master20180919.sql</strong> 文件上传到 <strong>release/master20180919</strong> 分支，并合并到生产、测试环境，正式环境打上标签 <strong>master20180919</strong> ，删除 <strong>release/master20180919</strong> 分支 ----&gt; 10、运维正式环境执行目录下的 <strong>master20180919.sql</strong> 、打版。</p>

<p>注意：脚本分预制脚本（insert）、建库脚本（create、alter）</p>
</blockquote>
</blockquote>

<h2 id="toc_4">DB建议</h2>

<blockquote>
<p>测试环境开放读写权限，公司白名单。</p>

<p>生产环境云端、门店数据库，白名单访问。</p>

<p>预发布环境只开放读权限，脚本需交给组长备份，组长交给运维执行。建议备份文件名和 <strong>预发布分支</strong> 名保持一致，<strong>预发布分支</strong> 合并到 <strong>生产分支</strong> 时添加到 <strong>预发布分支</strong> 的SQL文件夹下，并执行相同名称的sql文件。</p>

<p>缺：平台出工具根据时间段抽取云端指定商户、门店的数据，并做脱敏处理。</p>
</blockquote>

<h2 id="toc_5">Config建议</h2>

<blockquote>
<p>项目只留address.conf，local.conf两个配置文件，local.conf引用address.conf。所有存在环境差异的配置，都放到address.conf里，不要单独创建redis.conf。</p>

<p>1、address.conf中包含所有项目的ip、端口。</p>

<p>2、打版后线上通过固定目录的address.conf来覆盖打版项目的address.conf，所有项目共用一个。</p>

<p>3、address.conf的修改只能通过运维</p>

<p><strong>例如:</strong></p>

<p>address.conf配置如下：</p>

<p>Markup</p>

<pre><code class="language-text">#在文件中使用方式为：other.var1 = &quot;https://&quot;${address.db1.host}&quot;:&quot;${address.db1.port}&quot;/app/somefunction&quot;
address {
  #数据连接 地址/端口/数据库/用户名/密码
  db {
    host = &quot;10.170.195.16&quot;
    port = &quot;3306&quot;
    db_name = &quot;canyin_saas&quot;
    db_user = &quot;huoguo&quot;
    db_password = &quot;12312300&quot;
  }
  #本地登录及权限服务部署地址
  loginServer{
    host=&quot;http://test-canyinsaas.honghuotai.com&quot;
    port=&quot;8001&quot;
    path=&quot;/login&quot;
  }
  #微信appid
  wechat{
      appid=&quot;aaaaaaaaaaaa&quot;
      #微信appsecret
      appsecret=&quot;bbbbbbbbbbbbbbb&quot;
  }
  # Redis相关配置
  redis{
      ip = 127.0.0.1
      port = 6379
      passwd = 345555
      number = 0
      defaultDBNum = 0
      maxDBNum = 16
      maxActive = 1024
      maxIdle = 200
      maxWait = 1000
      testOnBorrow = false
      testOnReturn = true
  }
}
</code></pre>

<p>dev.conf配置如下</p>

<p>Markup</p>

<pre><code class="language-text">    include &quot;../application.conf&quot;
    include &quot;./address.conf&quot;
    db {
      default.driver = com.mysql.jdbc.Driver
      default.url = &quot;jdbc:mysql://&quot;${address.db.host}&quot;:&quot;${address.db.port}&quot;/&quot;${address.db.db_name}&quot;?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&quot;
      default.username = ${address.db.db_user}
      default.password = ${address.db.db_password}
      default.logSql = true
    }
    # 云端shop服务
    cloudServerSocketService=${address.cloudServerSocket.host}&quot;:&quot;${address.cloudServerSocket.port}${address.loginServer.path}
    #获取所有支付方式
    user.payway.getall=${loginService}&quot;/position/businesspower/getEmpPowerList&quot;
</code></pre>
</blockquote>

<h2 id="toc_6">后端插件建议</h2>

<blockquote>
<p>插件名：Alibaba Java Coding Guidelines</p>

<p>github地址：<a href="https://github.com/alibaba/p3c/">https://github.com/alibaba/p3c/</a></p>

<blockquote>
<p>安装步骤如下：</p>

<p>打开idea--&gt;Preference--&gt;Plugins--&gt;Browse Repositories。</p>

<p>搜Alibaba Java Coding Guidelines，点击安装，重启。</p>

<p>有问题的代码会以红色/黑色波浪线标记出来，需要按照提示修改代码。</p>
</blockquote>
</blockquote>

<h2 id="toc_7">代码建议</h2>

<blockquote>
<p>1、 接口入参避免使用类型强转</p>

<p>2、小数禁止直接参与运算，用BigDecimal</p>

<p>3、禁止直接往缓存中存放数据（前端同样适用）</p>
</blockquote>

<p>Java</p>

<pre><code class="language-text">//问题代码，无法追踪到userInfo的数据在哪里被修改。
public void doProblem(JSONObject userInfo){
    //do something
    if(RedisUtil.get(&quot;userInfo&quot;)!=null){
        //do something
        RedisUtil.del(&quot;userInfo&quot;);
    }else{
        //do something
        RedisUtil.set(&quot;userInfo&quot;,userInfo);
    }
}
//改进代码，可以在addUserInfo、deleteUserInfo方法中监控到userInfo添加、销毁。
public void doRight(JSONObject userInfo){
    //do something
    if(RedisUtil.getUserInfo()!=null){
        //do something
        RedisUtil.deleteUserInfo(&quot;userInfo&quot;);
    }else{
        //do something
        RedisUtil.addUserInfo(&quot;userInfo&quot;,userInfo);
    }
}
</code></pre>

<blockquote>
<p>4、数据库设计，下列字段必须有，model继承com.hht.common.base.model.BaseModel。</p>

<p>涉及到存操作员id的字段，全部存人员id，禁止存用户id（employId(人员id)来自pro_employee表，userId（用户id）来自hht_member表）</p>
</blockquote>

<p>Java</p>

<pre><code class="language-text">    //主键
    private String id;
    //删除状态Y,N
    private String dr;
    //时间戳，每次update操作都要更新
    private Long ts;
    //创建时间，只在insert时更新
    private Long createTime;
    //创建人id
    private String creatorId;
    //修改时间，update时更新此字段
    private Long modifyTime;
    //修改人，update时修改
    private String modifierId;
    //商户id，非报表查询必须加此条件
    private String companyId;
    //门店id，门店查询必须加此条件
    private String shopId;
    //是否可用，预留，N,Y
    private String enable;
</code></pre>

<blockquote>
<p>5、更多建议参考<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">http://www.ruanyifeng.com/blog/2012/07/git.html</a>里面的《阿里巴巴Java开发手册（详尽版）.pdf》</p>
</blockquote>

<h2 id="toc_8">接口建议</h2>

<blockquote>
<p>rap上的参数必须和实际接口中的参数一致，前后端并行开发时，先约定好mock数据。</p>

<p>严格按照restful规范，外部接口走token，服务之间能走token走token，走不了token走签名，不允许免认证（特殊接口除外）。</p>
</blockquote>

<h2 id="toc_9">打版建议</h2>

<blockquote>
<p>预发布、正式环境打版需填申请单</p>

<blockquote>
<p>1、组长合并代码，根据提交记录图找到所有提交人。</p>

<p>2、所有提交人签字，写上自己修改部分的关联项目，测试环境测试人员签字。（抽查）</p>

<p>3、预发布环境测试完成，期间所有脚本经过组长备份后交给运维执行。</p>

<p>4、预发布分支合并到生产环境分支，运行和预发布分支名称一样的数据库脚本文件，测试人员签字。</p>

<p>5、实施验证问题，填写或邮件确认验证情况。</p>

<p>6、申请单完成，交给产品存档。</p>
</blockquote>

<h2 id="toc_10">日志建议</h2>

<p>先按照各组需求输出，规范待整理</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[各种队列的执行效果]]></title>
    <link href="http://www.citynight.cn/Blog/15375346728525.html"/>
    <updated>2018-09-21T20:57:52+08:00</updated>
    <id>http://www.citynight.cn/Blog/15375346728525.html</id>
    <content type="html"><![CDATA[
<table>
<thead>
<tr>
<th style="text-align: left"></th>
<th style="text-align: left">并发队列</th>
<th style="text-align: left">手动创建的串行队列</th>
<th style="text-align: left">主队列</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">同步（sync）</td>
<td style="text-align: left">*没有开启新线程 *串行执行任务</td>
<td style="text-align: left">*没有开启新线程 *串行执行任务</td>
<td style="text-align: left">*没有开启新线程 *串行执行任务</td>
</tr>
<tr>
<td style="text-align: left">异步（async）</td>
<td style="text-align: left">*有开启新线程 *并发执行任务</td>
<td style="text-align: left">*有开启新线程 *串行执行任务</td>
<td style="text-align: left">*没有开启新线程 *串行执行任务</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocaPods 添加头文件的报错failed to emit precompiled header 的解决办法]]></title>
    <link href="http://www.citynight.cn/Blog/15374224515215.html"/>
    <updated>2018-09-20T13:47:31+08:00</updated>
    <id>http://www.citynight.cn/Blog/15374224515215.html</id>
    <content type="html"><![CDATA[
<p>在buildsetting中的以下两个路径中添加对应的设置，重现编译即可解决，stackoverflow地址：<a href="https://stackoverflow.com/questions/45779591/failed-to-emit-precompiled-header-for-bridging-header?answertab=votes#tab-top">Failed to emit precompiled header for bridging header</a></p>

<pre><code class="language-text">Solution:
1 I added $(inherited) non-recursive to Search Path -&gt; Header Search Paths
2 Then added ${PODS_ROOT} recursive to Search Path -&gt; User Header Search Paths
Both the above in my projects&#39; target build settings.
</code></pre>

<p><img src="media/15374224515215/15374225919741.jpg" alt="" style="width:794px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[<禅与摩托车维修艺术>]]></title>
    <link href="http://www.citynight.cn/Blog/15366461063408.html"/>
    <updated>2018-09-11T14:08:26+08:00</updated>
    <id>http://www.citynight.cn/Blog/15366461063408.html</id>
    <content type="html"><![CDATA[
<p>生活处处都透露着哲学，作者从骑摩托车旅行的途中对事物进行了深入的思考。</p>

<h2 id="toc_0">关于·忙·</h2>

<p>书中这样写道：</p>

<blockquote>
<p>我们常常太忙而没有时间好好聊聊，结果日复一日地过着无聊的生活，单调乏味的日子让人几年后想起来不禁怀疑，究竟自己是怎么过的，而时间已悄悄溜走了。现在我们的确空下来了，我想谈一些我自己觉得颇为重要的事。</p>
</blockquote>

<h2 id="toc_1">关于·过程·</h2>

<blockquote>
<p>如果搭飞机抵达洛基山，你只会觉得景致很美，但是如果你是经过几天辛苦的旅程，通过这一片大草原，才抵达洛基山，那么你会从另一个角度来看它，那里仿佛是你的目标，是你的应许之地。</p>
</blockquote>

<p>我们的目标不应该仅仅是到达终点，旅途中的风景会让这个过程变得充实。我在记笔记的时候写的是“有过程的经历是印象深刻的”</p>

<h2 id="toc_2">关于·识人·</h2>

<blockquote>
<p>又钻进死胡同了。如果有人不懂心存感激，而你当面告诉他，那么你就等于是在骂他，这样你什么事都解决不了。<br/>
每个人的性格都是不一样的，需要针对不同的性格做出不同的处理方式。错误的处理方式只会加深矛盾</p>
</blockquote>

<h2 id="toc_3">关于·认知·</h2>

<blockquote>
<p>一名没有受过训练的旁观者只看到修理人员所付出的劳力，就以为他最主要的工作在于劳力。事实上，这正是他最轻松也是工作上最小的一部分，他最重要的工作就在于仔细观察和精确思考，这就是为什么技术人员往往显得沉默寡言，甚至在做实验的时候有些畏缩。他们不喜欢在做实验的时候讲话，那样就无法专心地思考问题了。他们借着实验推论出问题的结构，然后与心里正常的运作结构相比较，所以他们看到的是基本形式。</p>
</blockquote>

<p>隔行如隔山，拿程序员举例，其他人看到程序员噼里啪啦敲代码感觉这个人很厉害这其实是不对的。在敲代码之前的思考才是最重要的，敲代码只不过是把他思考的东西进行验证。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[framework脚本]]></title>
    <link href="http://www.citynight.cn/Blog/15345002536089.html"/>
    <updated>2018-08-17T18:04:13+08:00</updated>
    <id>http://www.citynight.cn/Blog/15345002536089.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-text">if [ &quot;${ACTION}&quot; = &quot;build&quot; ]

then

INSTALL_DIR=${SRCROOT}/Products/${PROJECT_NAME}.framework

DEVICE_DIR=${BUILD_ROOT}/${CONFIGURATION}-iphoneos/${PROJECT_NAME}.framework

SIMULATOR_DIR=${BUILD_ROOT}/${CONFIGURATION}-iphonesimulator/${PROJECT_NAME}.framework

SIMULATOR_SWIFT_MODULE_DIR=&quot;${SIMULATOR_DIR}/Modules/${PROJECT_NAME}.swiftmodule/*&quot;

INSTALL_SWIFT_MODULE_DIR=${INSTALL_DIR}/Modules/${PROJECT_NAME}.swiftmodule/

if [ -d &quot;${INSTALL_DIR}&quot; ]

then

rm -rf &quot;${INSTALL_DIR}&quot;

fi

mkdir -p &quot;${INSTALL_DIR}&quot;

cp -R &quot;${DEVICE_DIR}/&quot; &quot;${INSTALL_DIR}/&quot;

#ditto &quot;${DEVICE_DIR}/Headers&quot; &quot;${INSTALL_DIR}/Headers&quot;

lipo -create &quot;${DEVICE_DIR}/${PROJECT_NAME}&quot; &quot;${SIMULATOR_DIR}/${PROJECT_NAME}&quot; -output &quot;${INSTALL_DIR}/${PROJECT_NAME}&quot;

cp ${SIMULATOR_SWIFT_MODULE_DIR} &quot;${INSTALL_SWIFT_MODULE_DIR}&quot;

#open &quot;${DEVICE_DIR}&quot;

open &quot;${SRCROOT}/Products&quot;

fi
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView 第0的sectionHeaderView 不显示]]></title>
    <link href="http://www.citynight.cn/Blog/15336071866624.html"/>
    <updated>2018-08-07T09:59:46+08:00</updated>
    <id>http://www.citynight.cn/Blog/15336071866624.html</id>
    <content type="html"><![CDATA[
<p>只有当UITableView是Grouped样式，并且section的高度是通过sectionHeaderHeight设置的时候，第0个section的headerView才会丢失，通过代理设置不会丢失。如果UITableView是Plain样式就不会有任何问题。</p>

<p>下面是不显示第0个sectionHeaderView的情况<br/>
<img src="media/15336071866624/15336074512241.jpg" alt="" style="width:1406px;"/></p>

<p>正常显示<br/>
<img src="media/15336071866624/15336075291692.jpg" alt="" style="width:1394px;"/><br/>
在正常显示的时候明显感觉到第0个section上面有间距，真机没有测试。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[控制器透明，WebView透明]]></title>
    <link href="http://www.citynight.cn/Blog/15323970557540.html"/>
    <updated>2018-07-24T09:50:55+08:00</updated>
    <id>http://www.citynight.cn/Blog/15323970557540.html</id>
    <content type="html"><![CDATA[
<p>设置控制器透明</p>

<pre><code class="language-text">let vc = AfterOrderPotADViewController()
self.definesPresentationContext = true
vc.modalPresentationStyle = .overCurrentContext
vc.view.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.3)
self.present(vc, animated: false, completion: nil)
</code></pre>

<p>webView 设置透明</p>

<pre><code class="language-text">webView.backgroundColor = UIColor.clear
webView.isOpaque = false
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法总结]]></title>
    <link href="http://www.citynight.cn/Blog/15323249439841.html"/>
    <updated>2018-07-23T13:49:03+08:00</updated>
    <id>http://www.citynight.cn/Blog/15323249439841.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Fibonacci （斐波那契数列实现）</h2>

<pre><code class="language-text">///Fibonacci （斐波那契数列实现）
func fibonacci(_ n: Int) -&gt; Int{
    let result = [0,1]
    if n &lt; 2 {
        return result[n]
    }
    
    var fibNMinusOne = 1
    var fibNMinusTwo = 0
    var fibN = 0
    
    for _ in 2...n {
        fibN = fibNMinusOne + fibNMinusTwo
        fibNMinusTwo = fibNMinusOne
        fibNMinusOne = fibN
    }
    return fibN
}
</code></pre>

<h2 id="toc_1">BinarySearch (二分查找)</h2>

<h3 id="toc_2">非递归</h3>

<pre><code class="language-text">func binarySearch&lt;T: Comparable&gt;(_ a:[T], key: T) -&gt; Int {
    print(key)
    var lowerBound = 0
    var upperBound = a.count
    while lowerBound &lt; upperBound {

        let midIndex = lowerBound + (upperBound - lowerBound)/2

        if a[midIndex] == key {
            return midIndex
        }else if a[midIndex] &lt; key {
            lowerBound = midIndex + 1
        }else {
            upperBound = midIndex
        }
    }
    return -1
}
</code></pre>

<h3 id="toc_3">递归</h3>

<pre><code class="language-text">func binarySearch&lt;T : Comparable&gt;(startIndex: Int, endIndex: Int , arr:[T], key: T) -&gt; Int{
    let mind = startIndex + (endIndex - startIndex) / 2
    let mindValue = arr[mind]
    if mindValue == key {
        return mind
    }
    if mindValue &lt; key {
        return binarySearch(startIndex: mind + 1, endIndex: endIndex, arr: arr, key: key)
    } else if mindValue &gt; key {
        return binarySearch(startIndex: 0, endIndex: mind, arr: arr, key: key)
    }
    return -1
}
</code></pre>

<h2 id="toc_4">快速排序</h2>

<pre><code class="language-text">func quicksort&lt;T: Comparable&gt;(_ unsort:[T]) -&gt; [T] {
    guard unsort.count &gt; 1 else {
        return unsort
    }
    
    let pivot = unsort[unsort.count / 2]
    let less = unsort.filter { $0 &lt; pivot }
    let equal = unsort.filter { $0 == pivot }
    let greater = unsort.filter { $0 &gt; pivot }
    
    return quicksort(less) + equal + quicksort(greater)
}
</code></pre>

<p>测试结果</p>

<pre><code class="language-text">let list = [ 10, 0, 3, 9, 2, 14, 8, 27, 1, 5, 8, -1, 26 ]

print(list)
print(quicksort(list))
--------------------
[10, 0, 3, 9, 2, 14, 8, 27, 1, 5, 8, -1, 26]
[-1, 0, 1, 2, 3, 5, 8, 8, 9, 10, 14, 26, 27]

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决UILabel 末尾的空格被忽略]]></title>
    <link href="http://www.citynight.cn/Blog/15319018166027.html"/>
    <updated>2018-07-18T16:16:56+08:00</updated>
    <id>http://www.citynight.cn/Blog/15319018166027.html</id>
    <content type="html"><![CDATA[
<p>看到这篇文章<a href="https://www.lidaren.com/archives/1333">UILabel取消自动Trim空格和换行等空白字符</a></p>

<pre><code class="language-text">UILabel会自动清除的空白字符（UNICODE）
\u0009 CHARACTER TABULATION
\u000A LINE FEED
\u000D CARRIAGE RETURN
\u0020 SPACE
\u0085 NEXT LINE
\u00A0 NBSP
\u1680 OGHAM SPACE MARK
\u180E MONGOLIAN VOWEL SEPARATOR
\u2000 EN QUAD
\u200A HAIR SPACE
\u200B ZERO WIDTH SPACE
\u2028 LINE SEPARATOR
\u2029 PARAGRAPH SEPARATOR
\u202F NARROW NO-BREAK SPACE
\u205F MEDIUM MATHEMATICAL SPACE
\u3000 IDEOGRAPHIC SPACE
</code></pre>

<p>解决方案</p>

<pre><code class="language-text">    let paragraphStyle = NSMutableParagraphStyle()
    paragraphStyle.alignment = .right
    paragraphStyle.tailIndent = -10
    let myMutableString = NSMutableAttributedString(
        string: text,
        attributes: [
            NSAttributedStringKey.font: UIFont.systemFont(ofSize: 16),
            NSAttributedStringKey.paragraphStyle: paragraphStyle
        ]
    )
    label.attributedText = myMutableString
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图片加载方式]]></title>
    <link href="http://www.citynight.cn/Blog/15299939008214.html"/>
    <updated>2018-06-26T14:18:20+08:00</updated>
    <id>http://www.citynight.cn/Blog/15299939008214.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15299939008214/15299939112098.jpg" alt=""/><br/>
<img src="media/15299939008214/15299939172785.jpg" alt=""/></p>

<p>图像的降采样</p>

<p>不要使用昂贵的UIImage：UIImage会解压原始的图片占用大量的内存<br/>
内部的坐标变换也非常昂贵</p>

<p>使用ImageIO的CGImageSourceCreateThumbnailAtIndex API: 无视原始图片尺寸，resize的内存开销只是目标尺寸（请看Session中后半部分的Demo）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[金额显示]]></title>
    <link href="http://www.citynight.cn/Blog/15271249936113.html"/>
    <updated>2018-05-24T09:23:13+08:00</updated>
    <id>http://www.citynight.cn/Blog/15271249936113.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-text">//初始化NumberFormatter
let format = NumberFormatter()
//设置numberStyle（有多种格式）
format.numberStyle = .decimal
//转换后的string
let string = format.string(from: NSNumber(value: 1234567.89))
//打印
print(string)  //1,234,567.89

//显示样式和输出样式
numberStyle:
public enum Style : UInt {  

        case none //1234567.89

        case decimal //1,234,567.89

        case currency //￥1,234,567.89

        case percent //123,456,789%

        case scientific //1.23456789E6

        case spellOut //一百二十三万四千五百六十七点八九

        @available(iOS 9.0, *)
        case ordinal //第123,4568

        @available(iOS 9.0, *)
        case currencyISOCode //CNY1,234,567.89

        @available(iOS 9.0, *)
        case currencyPlural//1,234,567.89人民币

        @available(iOS 9.0, *)
        case currencyAccounting//￥1,234,567.89
    }

//输入123456789分别输出
// 123456789
// 123,456,789
//￥123,456,789.00
//12345678900%
//1.23456789E8
//一亿二千三百四十五万六千七百八十九
//第1,2345,6789
//CNY123,456,789.00
//123,456,789.00人民币
//￥123,456,789.00
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程需要注意的问题]]></title>
    <link href="http://www.citynight.cn/Blog/15257017136249.html"/>
    <updated>2018-05-07T22:01:53+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257017136249.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">死锁（Dead Lock）</h2>

<p>第一种情况：</p>

<pre><code class="language-text">let serialQueue = DispatchQueue(label:&quot;test&quot;)
serialQueue.async {
    //.....
    serialQueue.sync {
        //...
    }
}

</code></pre>

<p>第二种情况：</p>

<pre><code class="language-text">let operationA = Operation()
let operationB = Operation()
operationA.addDependency(operationB)
operationB.addDependency(operationA)

</code></pre>

<p>怎样避免死锁：</p>

<ol>
<li>少用依赖</li>
<li>慎用同步</li>
</ol>

<h2 id="toc_1">优先倒置（Priority Inversion）</h2>

<pre><code class="language-text">var highPriorityQueue = DispatchQueue.global(qos: .userInitiated)
var lowPriorityQueue = DispatchQueue.global(qos: .utility)

let semaphore = DispatchSemaphore(value: 1)

lowPriorityQueue.async {
    semaphore.wait()
    for i in 0...10 {
        print(i)
    }
    semaphore.signal()
}

highPriorityQueue.async {
    semaphore.wait()
    for i in 11...20 {
        print(1)
    }
}

</code></pre>

<p>解决办法：<br/>
同一个资源用同一个Qos</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 应用图标没有在launchpad里显示]]></title>
    <link href="http://www.citynight.cn/Blog/15257016488742.html"/>
    <updated>2018-05-07T22:00:48+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257016488742.html</id>
    <content type="html"><![CDATA[
<p>重置Launchpad</p>

<pre><code class="language-text">rm ~/Library/Application\ Support/Dock/*.db

</code></pre>

<pre><code class="language-text">killall Dock
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carthage 不能正常更新]]></title>
    <link href="http://www.citynight.cn/Blog/15257016195473.html"/>
    <updated>2018-05-07T22:00:19+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257016195473.html</id>
    <content type="html"><![CDATA[
<p>报错</p>

<pre><code class="language-text">➜  PersonalMusic git:(master) carthage update
*** Cloning GCDWebServer
A shell task (/usr/bin/env git clone --bare --quiet https://github.com/swisspol/GCDWebServer.git /Users/lixzzzzzz/Library/Caches/org.carthage.CarthageKit/dependencies/GCDWebServer) failed with exit code 128:
fatal: unable to access &#39;https://github.com/swisspol/GCDWebServer.git/&#39;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443

</code></pre>

<p>解决办法：</p>

<p>清缓存</p>

<pre><code class="language-text">rm -rf ~/Library/Caches/org.carthage.CarthageKit
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置placeholder颜色]]></title>
    <link href="http://www.citynight.cn/Blog/15257015417604.html"/>
    <updated>2018-05-07T21:59:01+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257015417604.html</id>
    <content type="html"><![CDATA[
<p>从前设置颜色可能是这样的：</p>

<pre><code class="language-text">self.textField.setValue(UIColor.white, forKeyPath: &quot;_placeholderLabel.textColor&quot;)

</code></pre>

<p>今天发现，居然有一个属性可以设置：</p>

<pre><code class="language-text">self.textField.attributedPlaceholder =
            NSAttributedString(string: &quot;自定义金额&quot;,
                               attributes:
                [NSAttributedStringKey.foregroundColor: UIColor.white]
        )

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[懒加载的另一种写法]]></title>
    <link href="http://www.citynight.cn/Blog/15257015215231.html"/>
    <updated>2018-05-07T21:58:41+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257015215231.html</id>
    <content type="html"><![CDATA[
<p>原先我一直这样写：</p>

<pre><code class="language-text">    private lazy var imageView: UIImageView = {
        let imageView = UIImageView(image: UIImage(named: &quot;placeholder&quot;))
        imageView.contentMode = .center
        return imageView
    }()

</code></pre>

<p>今天看到了另一种比较简洁的写法</p>

<pre><code class="language-text">private lazy var imageView: UIImageView = {
        $0.contentMode = .center
        return $0
    }(UIImageView())

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cell点击时多次Push]]></title>
    <link href="http://www.citynight.cn/Blog/15257014756710.html"/>
    <updated>2018-05-07T21:57:55+08:00</updated>
    <id>http://www.citynight.cn/Blog/15257014756710.html</id>
    <content type="html"><![CDATA[
<p><a href="https://stackoverflow.com/questions/5687991/uitableview-didselectrowatindexpath-called-twice">stackoverflow上面的解决方案</a></p>

<pre><code class="language-text">func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {

    tableView.deselectRowAtIndexPath(indexPath, animated: true)

    if let navigationController = navigationController {
        guard navigationController.topViewController == self else {
            return
        }
    }
}

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[防止Timer 与控制器耦合导致控制器不释放]]></title>
    <link href="http://www.citynight.cn/Blog/15180682554389.html"/>
    <updated>2018-02-08T13:37:35+08:00</updated>
    <id>http://www.citynight.cn/Blog/15180682554389.html</id>
    <content type="html"><![CDATA[
<p>在<code>OC</code>中可以使用<code>NSProxy</code> 的转发机制防止timer强引用<br/>
具体例子可以参考<a href="https://github.com/ibireme/YYKit/blob/3869686e0e560db0b27a7140188fad771e271508/YYKit/Utility/YYWeakProxy.h">YYKit</a>中的处理方式,代码如下：</p>

<pre><code class="language-text">#import &quot;YYWeakProxy.h&quot;


@implementation YYWeakProxy

- (instancetype)initWithTarget:(id)target {
    _target = target;
    return self;
}

+ (instancetype)proxyWithTarget:(id)target {
    return [[YYWeakProxy alloc] initWithTarget:target];
}

- (id)forwardingTargetForSelector:(SEL)selector {
    return _target;
}

- (void)forwardInvocation:(NSInvocation *)invocation {
    void *null = NULL;
    [invocation setReturnValue:&amp;null];
}

- (NSMethodSignature *)methodSignatureForSelector:(SEL)selector {
    return [NSObject instanceMethodSignatureForSelector:@selector(init)];
}

- (BOOL)respondsToSelector:(SEL)aSelector {
    return [_target respondsToSelector:aSelector];
}

- (BOOL)isEqual:(id)object {
    return [_target isEqual:object];
}

- (NSUInteger)hash {
    return [_target hash];
}

- (Class)superclass {
    return [_target superclass];
}

- (Class)class {
    return [_target class];
}

- (BOOL)isKindOfClass:(Class)aClass {
    return [_target isKindOfClass:aClass];
}

- (BOOL)isMemberOfClass:(Class)aClass {
    return [_target isMemberOfClass:aClass];
}

- (BOOL)conformsToProtocol:(Protocol *)aProtocol {
    return [_target conformsToProtocol:aProtocol];
}

- (BOOL)isProxy {
    return YES;
}

- (NSString *)description {
    return [_target description];
}

- (NSString *)debugDescription {
    return [_target debugDescription];
}
</code></pre>

<p>在Swift中怎么处理？王巍的<a href="https://gist.github.com/onevcat/2d1ceff1c657591eebde">Gist</a>中写了一种</p>

<pre><code class="language-text">private class Block&lt;T&gt; {
    let f : T
    init (_ f: T) { self.f = f }
}

extension NSTimer {
    static func xxx_scheduledTimerWithTimeInterval(ti: NSTimeInterval, block: ()-&gt;(), repeats: Bool) -&gt; NSTimer {
        return self.scheduledTimerWithTimeInterval(ti, target:
            self, selector: &quot;xxx_blcokInvoke:&quot;, userInfo: Block(block), repeats: repeats)
    }
    
    static func xxx_blcokInvoke(timer: NSTimer) {
        if let block = timer.userInfo as? Block&lt;()-&gt;()&gt; {
            block.f()
        }
    }
}
</code></pre>

<p>当然还有其他的方式比如：<a href="https://stackoverflow.com/questions/44096793/how-to-set-cadisplaylink-in-swift-with-weak-reference-between-target-and-cadispl">How to set CADisplayLink in Swift with weak reference between target and CADisplayLink instance<br/>
</a> 等等。。。</p>

<p>目前公司项目中采用的方式如下：</p>

<pre><code class="language-text">class WeakTimer: NSObject {
    
    private weak var target: NSObject?
    private weak var timer: Timer?
    private var selector: Selector
    
    private var userInfo: Any?
    
    init(withTimeInterval ti: TimeInterval, target aTarget: NSObject, selector aSelector: Selector, userInfo: Any?, repeats yesOrNo: Bool) {
        self.target = aTarget
        self.selector = aSelector
        self.userInfo = userInfo
        super.init()
        timer = Timer.scheduledTimer(timeInterval: ti, target: self, selector: #selector(test), userInfo: userInfo, repeats: yesOrNo)
    }
    
    @objc private func test() {
        target?.perform(selector, with: self.userInfo, afterDelay: 0)
    }
    
    open class func scheduledTimer(timeInterval ti: TimeInterval, target aTarget: NSObject, selector aSelector: Selector, userInfo: Any?, repeats yesOrNo: Bool) -&gt; WeakTimer {
        let weakTimer = WeakTimer(withTimeInterval: ti, target: aTarget, selector: aSelector, userInfo: userInfo, repeats: yesOrNo)
        
        return weakTimer
    }
    
    open func invalidate() {
        timer?.invalidate()
    }
}
</code></pre>

<p>应用</p>

<pre><code class="language-text">    @objc private func dismissSelf() {
        self.weakTimer?.invalidate()
        self.weakTimer = nil
        // HHTSwitchGlobalData.shared.waiterLoginTimeOut
        self.weakTimer = WeakTimer.scheduledTimer(timeInterval: HHTSwitchGlobalData.shared.waiterLoginTimeOut, target: self, selector: #selector(autoDismiss), userInfo: nil, repeats: true)
    }
</code></pre>

<p>第三方库 Kingfisher 中的处理办法</p>

<pre><code class="language-text">    /// Proxy object for prevending a reference cycle between the CADDisplayLink and AnimatedImageView.
    class TargetProxy {
        private weak var target: AnimatedImageView?
        
        init(target: AnimatedImageView) {
            self.target = target
        }
        
        @objc func onScreenUpdate() {
            target?.updateFrame()
        }
    }
</code></pre>

<p>应用:</p>

<pre><code class="language-text">private lazy var displayLink: CADisplayLink = {
        self.isDisplayLinkInitialized = true
        let displayLink = CADisplayLink(target: TargetProxy(target: self), selector: #selector(TargetProxy.onScreenUpdate))
        displayLink.add(to: .main, forMode: self.runLoopMode)
        displayLink.isPaused = true
        return displayLink
    }()
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[显示中划线,下划线]]></title>
    <link href="http://www.citynight.cn/Blog/15166722537296.html"/>
    <updated>2018-01-23T09:50:53+08:00</updated>
    <id>http://www.citynight.cn/Blog/15166722537296.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">OC中显示</h3>

<h5 id="toc_1">添加中划线:</h5>

<pre><code class="language-text">  UILabel * strikeLabel = [[UILabel alloc] initWithFrame:(CGRectMake(10, 10, 50, 30))];
  NSString *textStr = [NSString stringWithFormat:@&quot;%@元&quot;, primeCost];

  //中划线
  NSDictionary *attribtDic = @{NSStrikethroughStyleAttributeName: [NSNumber numberWithInteger:NSUnderlineStyleSingle]};
  NSMutableAttributedString *attribtStr = [[NSMutableAttributedString alloc]initWithString:textStr attributes:attribtDic];

  // 赋值
  strikeLabel.attributedText = attribtStr;

  [self.view addSubview:strikeLabel];
</code></pre>

<h5 id="toc_2">添加下划线:</h5>

<pre><code class="language-text">  UILabel *underlineLabel = [[UILabel alloc] initWithFrame:(CGRectMake(10, 10, 50, 30))];
  NSString *textStr = [NSString stringWithFormat:@&quot;%@元&quot;, primeCost];

  // 下划线
  NSDictionary *attribtDic = @{NSUnderlineStyleAttributeName: [NSNumber numberWithInteger:NSUnderlineStyleSingle]};
  NSMutableAttributedString *attribtStr = [[NSMutableAttributedString alloc]initWithString:textStr attributes:attribtDic];

  //赋值
  underlineLabel.attributedText = attribtStr;

  [self.view addSubview:underlineLabel];
</code></pre>

<h3 id="toc_3">Swift中显示</h3>

<pre><code class="language-text">let myAttributes: [NSAttributedStringKey : Any] = [NSAttributedStringKey.strikethroughStyle: NSUnderlineStyle.styleSingle.rawValue]
            
let attributedText = NSAttributedString(string: &quot;被划线文字&quot;, attributes: myAttributes)
</code></pre>

]]></content>
  </entry>
  
</feed>
