<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李小争]]></title>
  <link href="http://www.citynight.cn/Blog/atom.xml" rel="self"/>
  <link href="http://www.citynight.cn/Blog/"/>
  <updated>2016-11-23T23:32:53+08:00</updated>
  <id>http://www.citynight.cn/Blog/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift - 面向协议编程]]></title>
    <link href="http://www.citynight.cn/Blog/14799970254990.html"/>
    <updated>2016-11-24T22:17:05+08:00</updated>
    <id>http://www.citynight.cn/Blog/14799970254990.html</id>
    <content type="html"><![CDATA[
<p>跟全部写在base中比较:</p>

<ol>
<li>代码没有增多,却更复用</li>
<li>面向协议(接口),而不是实现,充分解耦</li>
<li>静态类型检查版主在编译时发现问题</li>
<li>写代码像搭积木,先设计接口,再逐一实现</li>
<li>依赖少,更容易调试</li>
</ol>

<pre><code>protocol Hello {
    func sayHello()
}

extension Hello {
    func sayHello() {
        print(&quot;Hello!&quot;)
    }
}

struct Person: Hello {
    
}

let p = Person()
p.sayHello()
</code></pre>

<p>创建一个协议,并且做一个默认实现.使用的时候可以直接调用</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - 函数式编程]]></title>
    <link href="http://www.citynight.cn/Blog/14799126696997.html"/>
    <updated>2016-11-23T22:51:09+08:00</updated>
    <id>http://www.citynight.cn/Blog/14799126696997.html</id>
    <content type="html"><![CDATA[
<p>一般情况:</p>

<pre><code>struct User {
    func login(password: String){
        print(password)
    }
}

let passwd = &quot;123123123&quot;
let usr = User()

usr.login(password: passwd)
</code></pre>

<p>函数式编程</p>

<pre><code>struct User {
    func login(password: String){
        print(password)
    }
}

let passwd = &quot;123123123&quot;
let usr = User()

User.login(usr)(password: passwd)
</code></pre>

<p>由此可见: <code>usr.login(password: passwd)</code> == <code>User.login(usr)(password: passwd)</code></p>

<p>如果忽略外部参数</p>

<pre><code>struct User {
    func login(_ password: String){
        print(password)
    }
}

let passwd = &quot;123123123&quot;
let usr = User()
usr.login(passwd)
User.login(usr)(passwd)
</code></pre>

<p>这样就更简洁了</p>

<hr/>

<p>&mdash;-未完待续&mdash;</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - 使用代理和闭包传值]]></title>
    <link href="http://www.citynight.cn/Blog/14796301513904.html"/>
    <updated>2016-11-20T16:22:31+08:00</updated>
    <id>http://www.citynight.cn/Blog/14796301513904.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">代理传值</h2>

<p>声明协议:</p>

<pre><code>protocol FunctionButtonViewDelegate {
    func gotoViewController(vcString:String)
}
</code></pre>

<pre><code>var delegate :FunctionButtonViewDelegate?
</code></pre>

<p>这里<code>?</code>就具有<code>weak</code>的作用</p>

<p>传值:</p>

<pre><code>delegate?.gotoViewController(vcString: button.currentTitle!)
</code></pre>

<p>实现代理方法</p>

<pre><code>extension PersonalCenterViewController:FunctionButtonViewDelegate {
    //MARK: - 跳转到对应的功能模块
    func gotoViewController(vcString: String) {
        print(vcString)
    }
}
</code></pre>

<h2 id="toc_1">闭包传值</h2>

<p>声明:</p>

<pre><code>var callback : ((Int?) -&gt; Void)?
</code></pre>

<p>传值</p>

<pre><code>if let cb = callback {
    cb(200)
}
</code></pre>

<p>实现:</p>

<pre><code>bottomView.callback = { (num)-&gt;Void in
    print(num ?? 0)
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - 在swift中如何使用 hexcolor 值表示颜色]]></title>
    <link href="http://www.citynight.cn/Blog/14796201135474.html"/>
    <updated>2016-11-20T13:35:13+08:00</updated>
    <id>http://www.citynight.cn/Blog/14796201135474.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>结果来自<a href="http://stackoverflow.com/questions/24263007/how-to-use-hex-colour-values-in-swift-ios">How to use hex colour values in Swift, iOS</a></p>
</blockquote>

<pre><code>extension UIColor {
    convenience init(hexString: String) {
        let hex = hexString.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int = UInt32()
        Scanner(string: hex).scanHexInt32(&amp;int)
        let a, r, g, b: UInt32
        switch hex.characters.count {
        case 3: // RGB (12-bit)
            (a, r, g, b) = (255, (int &gt;&gt; 8) * 17, (int &gt;&gt; 4 &amp; 0xF) * 17, (int &amp; 0xF) * 17)
        case 6: // RGB (24-bit)
            (a, r, g, b) = (255, int &gt;&gt; 16, int &gt;&gt; 8 &amp; 0xFF, int &amp; 0xFF)
        case 8: // ARGB (32-bit)
            (a, r, g, b) = (int &gt;&gt; 24, int &gt;&gt; 16 &amp; 0xFF, int &gt;&gt; 8 &amp; 0xFF, int &amp; 0xFF)
        default:
            (a, r, g, b) = (255, 0, 0, 0)
        }
        self.init(red: CGFloat(r) / 255, green: CGFloat(g) / 255, blue: CGFloat(b) / 255, alpha: CGFloat(a) / 255)
    }
}
</code></pre>

<p>使用方法:</p>

<pre><code>let darkGrey = UIColor(hexString: &quot;#757575&quot;)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git学习]]></title>
    <link href="http://www.citynight.cn/Blog/14793607171148.html"/>
    <updated>2016-11-17T13:31:57+08:00</updated>
    <id>http://www.citynight.cn/Blog/14793607171148.html</id>
    <content type="html"><![CDATA[
<p>工作中必须使用git,但是原先一直使用svn,所以有点坑&hellip;这里简单总结下简单用法</p>

<h2 id="toc_0">svn与git的不同</h2>

<p>一个是集中式版本管理控制,一个是分布式</p>

<p><strong>集中式版本控制:</strong><br/>
<img src="media/14793607171148/14795544773647.jpg" alt=""/></p>

<p><strong>分布式版本控制:</strong><br/>
<img src="media/14793607171148/14795545177377.jpg" alt=""/></p>

<h2 id="toc_1">git简单实用</h2>

<h3 id="toc_2">git help</h3>

<pre><code>$ git help
</code></pre>

<p>查看git所有命令的帮助</p>

<pre><code>$ git help 子命令
</code></pre>

<p>要退出帮助信息，按<code>&quot;q&quot;</code><br/>
翻看下页，按<code>&quot;空格&quot;</code><br/>
翻看上页，按<code>&quot;CTRL+B&quot;</code><br/>
要搜索相关文字，按<code>&quot;/&quot;</code>然后输入<code>&quot;相关文字&quot;</code></p>

<h3 id="toc_3">配置</h3>

<p>1&gt;  创建代码仓库</p>

<pre><code>$ git init
</code></pre>

<p>2&gt;  配置用户名和邮箱</p>

<pre><code>$ git config user.name manager
$ git config user.email manager@gmail.com
</code></pre>

<ul>
<li>以上两个命令会将用户信息保存在当前代码仓库中</li>
</ul>

<p>3&gt;  如果要一次性配置完成可以使用一下命令</p>

<pre><code>$ git config --global user.name manager
$ git config --global user.email manager@gmail.com
</code></pre>

<ul>
<li>以上两个命令会将用户信息保存在用户目录下的 <code>.gitconfig</code> 文件中</li>
</ul>

<p>4&gt;  查看当前所有配置</p>

<pre><code>$ git config -l
</code></pre>

<h3 id="toc_4">开发中常用</h3>

<p>1&gt;  创建代码，开始开发</p>

<pre><code>$ touch main.c
$ open main.c
</code></pre>

<p>2&gt;  将代码添加到代码库</p>

<ol>
<li> 查看当前代码库状态
<code>
$ git status
</code></li>
<li> 将文件添加到代码库
<code>
$ git add main.c
</code></li>
<li><p>将修改提交到代码库<br/>
<code><br/>
$ git commit -m &quot;添加了main.c&quot;<br/>
</code><br/>
提示：</p>

<ul>
<li>   在此一定要使用 -m 参数指定修改的备注信息</li>
<li>   否则会进入 vim 编辑器，如果对vim不熟悉，会是很糟糕的事情</li>
</ul></li>
<li><p>将当前文件夹下的所有新建或修改的文件一次性添加到代码库<br/>
<code>$ git add .</code></p></li>
</ol>

<p>3&gt;  添加多个文件</p>

<pre><code>$ touch Person.h Person.m
$ git add .
$ git commit -m &quot;添加了Person类&quot;
$ open Person.h
$ git add .
$ git commit -m &quot;增加Person类属性&quot;
</code></pre>

<ul>
<li>注意 使用git时，每一次修改都需要添加再提交，这一点是与svn不一样的</li>
</ul>

<h2 id="toc_5">git 的重要概念及工作原理</h2>

<p>工作区<br/>
暂存区(staged)<br/>
分支(HEAD)</p>

<h2 id="toc_6">别名 &amp; 日志</h2>

<pre><code>$ git config alias.st status
$ git config alias.ci &quot;commit -m&quot;
</code></pre>

<p>除非特殊原因，最好不要设置别名，否则换一台机器就不会用了</p>

<p>查看所有版本库日志</p>

<pre><code>$ git log
</code></pre>

<p>查看指定文件的版本库日志</p>

<pre><code>$ git log 文件名
</code></pre>

<p>配置带颜色的log别名</p>

<pre><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;
</code></pre>

<p>提示：在git中，版本号是一个由SHA1生成的哈希值</p>

<h2 id="toc_7">版本号，让我们在任意版本之间穿梭</h2>

<pre><code># 回到当前版本，放弃所有没有提交的修改
$ git reset --hard HEAD
# 回到上一个版本
$ git reset --hard HEAD^
# 回到之前第3个修订版本
$ git reset --hard HEAD~3
# 回到指定版本号的版本
$ git reset --hard e695b67

# 查看分支引用记录
$ git reflog

</code></pre>

<h2 id="toc_8">分支管理 - Tag</h2>

<pre><code># 查看当前标签
$ git tag
# 在本地代码库给项目打上一个标签
$ git tag -a v1.0 -m &#39;Version 1.0&#39;
# 将标签添推送到远程代码库中
$ git push origin v1.0

# 使用tag，就能够将项目快速切换到某一个中间状态，例如产品开发线上的某一个稳定版本
# 签出v1.0标签
$ git checkout v1.0
# 从签出状态创建v1.0bugfix分支
$ git checkout -b bugfix1.0

# 查看远程分支
$ git branch -r
# 删除远程分支
$ git branch -r -d origin/bugfix1.0
</code></pre>

<p>删除修改返回到上次提交状态</p>

<pre><code>git checkout -f
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - 自定义tableViewCell]]></title>
    <link href="http://www.citynight.cn/Blog/14793055516073.html"/>
    <updated>2016-11-16T22:12:31+08:00</updated>
    <id>http://www.citynight.cn/Blog/14793055516073.html</id>
    <content type="html"><![CDATA[
<p>习惯 OC 刚刚接触 Swift 还是有很多地方不适应,创建自定义cell的时候出现如下情况</p>

<pre><code>    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
    }
</code></pre>

<p>OC 中,我们会用 self 来接 super 初始化来判断是否创建成功,但是 Swift 中怎样做呢?调用 <code>super.init</code>是没有返回值的,那么我们怎样判断呢?</p>

<p>从网上看<a href="http://stackoverflow.com/questions/37098742/super-init-in-swift">Super init in Swift</a>没有必要在进行<code>if(self)</code>判断了&hellip;不过,我还是找到了一种更容易理解的方法:</p>

<pre><code>    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        
        if !self.isEqual(nil) {
            setupInterface()
        }
    }

</code></pre>

<p>虽然感觉有点画蛇添足,不过很符合刚刚从OC 转 Swift 的理解方式</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[隐藏tabBar的小技巧]]></title>
    <link href="http://www.citynight.cn/Blog/14793034700265.html"/>
    <updated>2016-11-16T21:37:50+08:00</updated>
    <id>http://www.citynight.cn/Blog/14793034700265.html</id>
    <content type="html"><![CDATA[
<p>突然想起来 <code>微指App</code> 里面控制 tabBar 显示与隐藏非常麻烦,在控制器中的 <code>viewWillAppear</code> 和 <code>viewWillDisappear</code>中做处理,这样能保证在控制器中控制 tabBar 的显示与隐藏,但是也非常麻烦,每个控制器都需要控制..</p>

<p>一劳永逸的做法:</p>

<pre><code>    // 重写 push 方法
    override func pushViewController(_ viewController: UIViewController, animated: Bool) {
        // 如果不是栈底控制器才需要隐藏, 根控制器 不需要处理
        if childViewControllers.count &gt; 0 {
            // 隐藏底部的 TabBar
            viewController.hidesBottomBarWhenPushed = true
        }
        super.pushViewController(viewController, animated: true)
    }
</code></pre>

<p>在导航控制器中重写 <code>push</code> 方法,这样就能省去好多麻烦..</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS依赖库管理工具：Carthage]]></title>
    <link href="http://www.citynight.cn/Blog/14791335483032.html"/>
    <updated>2016-11-14T22:25:48+08:00</updated>
    <id>http://www.citynight.cn/Blog/14791335483032.html</id>
    <content type="html"><![CDATA[
<p>新项目需要使用一种新的依赖库管理工具:<code>Carthage</code> </p>

<blockquote>
<p>参见:<a href="http://www.jianshu.com/p/9a37b81a59d6">iOS依赖库管理工具：Carthage</a></p>
</blockquote>

<h2 id="toc_0">安装Carthage</h2>

<ul>
<li>使用终端安装</li>
</ul>

<pre><code>$brew update
$brew install carthage
</code></pre>

<ul>
<li>在<a href="https://github.com/Carthage/Carthage/releases">https://github.com/Carthage/Carthage/releases</a> 下载最新版的Carthage.pkg</li>
</ul>

<p>安装好Carthage后，查看Carthage当前版本</p>

<pre><code>$brew carthage version
</code></pre>

<h2 id="toc_1">使用Carthage</h2>

<ul>
<li>在项目所在文件夹中创建一个空的Carthage文件</li>
</ul>

<pre><code>$touch Cartfile  
$vi Cartfile
</code></pre>

<p><strong>$touch Cartfile</strong>：新建一个名为Cartfile的文件</p>

<p><strong>$vi Cartfile</strong>：打开名为Cartfile文件，如若该文件不存在会新建</p>

<ul>
<li>在Cartfile中加入一下内容，以Alamofire为例：</li>
</ul>

<pre><code>github &quot;Alamofire/Alamofire&quot; ~&gt; 3.0
</code></pre>

<p>版本含义：<br/>
<code>~&gt; 3.0：表示使用版本高于3.0低于4.0的最新版本</code><br/>
<code>== 3.0：使用3.0版本</code><br/>
<code>&gt;= 3.0：使用3.0版本或者更高版本</code><br/>
如果没有指明版本号，默认使用最新版本</p>

<ul>
<li>保存并关闭Cartfile文件，在终端执行如下命令，carthage开始下载和编译所需要的第三方库，当命令执行完毕，项目文件夹中会创建一个名为Carthage的文件夹，并且在~/Carthage/Build/iOS中出现Alamofire.framework文件</li>
</ul>

<pre><code>$carthage update
</code></pre>

<ul>
<li><p>打开项目，点击project-&gt;target-&gt;General，在Embedded Binaries添加Alamofire.framework</p></li>
<li><p>此时已经可以使用导入的第三方库了，在需要的文件中导入头文件</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - 懒加载 lazy]]></title>
    <link href="http://www.citynight.cn/Blog/14791319119586.html"/>
    <updated>2016-11-14T21:58:31+08:00</updated>
    <id>http://www.citynight.cn/Blog/14791319119586.html</id>
    <content type="html"><![CDATA[
<p>为什么使用懒加载?</p>

<ol>
<li>能够延迟创建</li>
<li>解除解包的烦恼</li>
</ol>

<blockquote>
<p>参考<strong>Swifter</strong>中`lazy 修饰符和 lazy 方法</p>
</blockquote>

<h2 id="toc_0">常用方法</h2>

<p>OC中的懒加载</p>

<pre><code>// ClassA.h
@property (nonatomic, copy) NSString *testString;

// ClassA.m
- (NSString *)testString {
     if (!_testString) {
         _testString = @&quot;Hello&quot;;
        NSLog(@&quot;只在首次访问输出&quot;);
     }
     return _testString;
}
</code></pre>

<p>Swift中:</p>

<pre><code>class ClassA {
    lazy var str: String = {
        let str = &quot;Hello&quot;
        print(&quot;只在首次访问输出&quot;)
        return str
    }()
}
</code></pre>

<p>简化版本:</p>

<pre><code>lazy var str: String = &quot;Hello&quot;
</code></pre>

<h2 id="toc_1">其他用法</h2>

<pre><code>        let data = 1...3
        let result = data.map { (i:Int) -&gt; Int in
            print(&quot;正在处理\(i)&quot;)
            return 1*2
        }
        
        print(&quot;准备访问结果&quot;)
        
        for i in result {
            print(&quot;操作后结果为\(i)&quot;)
        }

</code></pre>

<p>结果:</p>

<pre><code>正在处理1
正在处理2
正在处理3
准备访问结果
操作后结果为2
操作后结果为4
操作后结果为6
</code></pre>

<p>如果使用lazy</p>

<pre><code>        let data = 1...3
        let result = data.lazy.map { (i:Int) -&gt; Int in
            print(&quot;正在处理\(i)&quot;)
            return i*2
        }
        
        print(&quot;准备访问结果&quot;)
        
        for i in result {
            print(&quot;操作后结果为\(i)&quot;)
        }

</code></pre>

<p>结果:<br/>
<code><br/>
准备访问结果<br/>
正在处理1<br/>
操作后结果为2<br/>
正在处理2<br/>
操作后结果为4<br/>
正在处理3<br/>
操作后结果为6<br/>
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - convenience 便利构造函数]]></title>
    <link href="http://www.citynight.cn/Blog/14790461560134.html"/>
    <updated>2016-11-13T22:09:16+08:00</updated>
    <id>http://www.citynight.cn/Blog/14790461560134.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>具体解释可以参见 <strong>Swifter</strong> 中<code>Designated，Convenience 和 Required</code></p>
</blockquote>

<p>使用遍历工造函数的好处可以参见如下代码:</p>

<pre><code>import UIKit

extension UITextField {
    convenience init(frame:CGRect, placeholder:String,fontSize:CGFloat = 14) {
        self.init(frame:frame)
        
        self.borderStyle = .roundedRect
        self.placeholder = placeholder
        self.font = UIFont.systemFont(ofSize: fontSize)
    }
}

</code></pre>

<p><strong>好处:</strong><br/>
1. 判断条件,只有满足条件才实例化对象,可以防止造成不必要的内存开销<br/>
2. 简化对象的创建  -&gt;利用<code>extension</code>抽取控件创建方法<br/>
3. 本身不负责属性的创建和初始化工作<br/>
4. 可以返回nil</p>

<p><strong>注意点:</strong><br/>
1. 必须调用本类的 <code>self.init</code>,不能调用父类的<code>super.init</code><br/>
2. 不能被重写</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - KVC 和 运行时获取属性列表]]></title>
    <link href="http://www.citynight.cn/Blog/14790381443417.html"/>
    <updated>2016-11-13T19:55:44+08:00</updated>
    <id>http://www.citynight.cn/Blog/14790381443417.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Swift中如何使用KVC</h2>

<pre><code>import UIKit

class Person: NSObject {
    var name:String?
    var age: Int = 0
    var title:String?
    
    init(dict:[String:Any]) {
        super.init()
        setValuesForKeys(dict)
    }
    
    
    override func setValue(_ value: Any?, forUndefinedKey key: String) {
        
    }
}
</code></pre>

<p>注意:基本数据类型一开始要设置默认值.</p>

<h2 id="toc_1">Swift中运行时获取属性列表</h2>

<pre><code>class Person: NSObject {
    var name:String?
    var age: Int = 0
    var title:String?
    
    init(dict:[String:Any]) {
        super.init()
        setValuesForKeys(dict)
    }
    
    
    override func setValue(_ value: Any?, forUndefinedKey key: String) {
        
    }
    
    class func propertyList() -&gt; [String] {
        var count:UInt32 = 0
        
        let list = class_copyPropertyList(self,&amp;count)
        
        var array:[String] = [];
        
        for i in 0..&lt;Int(count) {
            
            // 获取属性
            let pty = list?[i]
            
            // 获取属性名称
            let cName = property_getName(pty)
            let name = String(utf8String: cName!)
            array.append(name!)
        }
        free(list)
        return array
    }
}

</code></pre>

<p>上面是OC写法,可以改进的更Swift一点:</p>

<pre><code>    class func propertyList() -&gt; [String] {
        var count:UInt32 = 0
        
        let list = class_copyPropertyList(self,&amp;count)
        
        var array:[String] = [];
        
        for i in 0..&lt;Int(count) {
            
            guard let pty = list?[i],
                let cName = property_getName(pty),
                let name = String(utf8String: cName)
                else {
                    // 继续遍历下一个
                    continue
            }
            array.append(name)
        }
        free(list)
        return array
    }
</code></pre>

<p>通过运行时可以发现:</p>

<ol>
<li>基本数据类型如果设置成可选类型则运行时获取不到(在OC中没有可选)&hellip;.  这就说明了上面的注意点,否则使用<code>KVC</code>会崩溃 </li>
<li>如果属性为<code>private</code>同样获取不到属性(可以获取到ivar),同样会让<code>KVC</code>崩溃</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - 函数]]></title>
    <link href="http://www.citynight.cn/Blog/14790175059723.html"/>
    <updated>2016-11-13T14:11:45+08:00</updated>
    <id>http://www.citynight.cn/Blog/14790175059723.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">函数的几种情况</h2>

<pre><code>// 正常
func sum(x:Int, y:Int) -&gt; Int {
    return x+y
}
print(sum(x: 10, y: 20))

// 去掉形参
func sum(_ x:Int,_ y:Int) -&gt; Int {
    return x+y
}
print(sum(10, 20))

// 外部参数
func sum(num1 x:Int,num2 y:Int) -&gt; Int {
    return x+y
}
print(sum(num1: 10, num2: 20))

// 函数带默认值
func sum(x:Int = 1, y:Int = 2) -&gt; Int {
    return x+y
}
print(sum())
</code></pre>

<h2 id="toc_1">闭包</h2>

<blockquote>
<p>闭包类似于OC中的block,但应用更广. 与OC对比, OC中block是特殊的函数,在Swift中函数是特殊的闭包</p>
</blockquote>

<pre><code>// 最简单的闭包
// 定义
let foo = {
    print(&quot;最简单的闭包&quot;)
}
// 调用
foo()

// 带参数无返回值
let foo = { (x:Int) -&gt; () in
    print(x)
}
foo(100)

// 带参数有返回值
let foo = { (x:Int) -&gt; Int in
    return x+1
}
foo(10)
</code></pre>

<p>block常用在异步执行,回调&hellip;Swift中异步跟OC稍微有些区别.</p>

<h3 id="toc_2">模拟异步加载</h3>

<pre><code>    /// 加载数据
    func loadData(completion:@escaping (_ result: [String])-&gt;()) {
        
        DispatchQueue.global().async {
            print(&quot;耗时操作\(Thread.current)&quot;)
            
            DispatchQueue.main.async {
                print(&quot;主线程更新\(Thread.current)&quot;)
                let json = [&quot;头条&quot;,&quot;八卦&quot;,&quot;出大事了&quot;]
                completion(json)
            }
        }
    }
</code></pre>

<p>注:关于<strong>@escaping</strong>参见 Swifter 中<code>@escaping</code></p>

<h3 id="toc_3">尾随闭包</h3>

<pre><code>        // 如果函数的最后一个参数是闭包,函数参数可以提前结束,最后一个参数直接使用{}包装闭包的代码
        loadData { (JSON) in
            print(JSON)
        }

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - 字典中的增删改,遍历与合并]]></title>
    <link href="http://www.citynight.cn/Blog/14789481799893.html"/>
    <updated>2016-11-12T18:56:19+08:00</updated>
    <id>http://www.citynight.cn/Blog/14789481799893.html</id>
    <content type="html"><![CDATA[
<p>增删改</p>

<pre><code>var dict:[String:Any] = [&quot;name&quot; : &quot;小明&quot;, &quot;age&quot; : 18, &quot;sex&quot;:&quot;man&quot;]

// 新增
dict[&quot;title&quot;] = &quot;老大&quot;
print(dict)

// 修改
dict[&quot;name&quot;] = &quot;赵四&quot;
print(dict)

// 删除
dict.removeValue(forKey: &quot;age&quot;)
print(dict)

</code></pre>

<p>遍历,合并</p>

<pre><code>// 遍历
for e in dict {
    print(e)
}

for (k,v) in dict {
    print(&quot;key:\(k)  value:\(v)&quot;)
}
// 合并
var dict1:[String:Any] = [&quot;name&quot; : &quot;李明&quot;, &quot;age&quot; : 18, &quot;sex&quot;:&quot;m&quot;]
var dict2:[String:Any] = [&quot;name&quot; : &quot;韩梅梅&quot;, &quot;age&quot; : 16, &quot;sex&quot;:&quot;w&quot;]
// 如果把 dict2 合并到 dict1
for e in dict2 {
    dict1[e.key] = e.value   //dict2[e.key]
}
print(&quot;----------\n\(dict1)&quot;)

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - 数组中的增删改与合并]]></title>
    <link href="http://www.citynight.cn/Blog/14789459811464.html"/>
    <updated>2016-11-12T18:19:41+08:00</updated>
    <id>http://www.citynight.cn/Blog/14789459811464.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>第一篇写了数组遍历的几种情况,这篇主要就是数组中的增删改,也是开发中常用的</p>
</blockquote>

<p>OC中数组分为可变(NSMutableArray)和不可变(NSArray) 相应的在Swift中就是 var &amp; let</p>

<h2 id="toc_0">追加元素</h2>

<p>首先定义一个可变数组</p>

<pre><code>var array = [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;]
</code></pre>

<p>追加一个元素</p>

<pre><code>// 追加元素
array.append(&quot;赵六&quot;)
print(array)
</code></pre>

<h2 id="toc_1">修改元素</h2>

<p>通过下标进行修改</p>

<pre><code>array[0] = &quot;赵四&quot;
print(array)
</code></pre>

<p>结果:</p>

<pre><code>[&quot;赵四&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;]
</code></pre>

<h2 id="toc_2">删除</h2>

<pre><code>// 删除元素
array.remove(at: 0)
print(array)
</code></pre>

<p>结果:</p>

<pre><code>[&quot;赵四&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;]
[&quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;]
</code></pre>

<p>remove 的方法由很多,移除首/尾,移除范围&hellip;</p>

<pre><code>array.removeAll(keepingCapacity: true)
print(&quot;数组中的元素\(array) 数组容量\(array.capacity)&quot;)
</code></pre>

<p>结果:</p>

<pre><code>数组中的元素[] 数组容量6
</code></pre>

<h2 id="toc_3">数组合并</h2>

<pre><code>var arr0 = [1,2,3]
let arr1 = [3,4,5]
arr0 += arr1
print(arr0)
</code></pre>

<p>结果:</p>

<pre><code>[1, 2, 3, 3, 4, 5]
</code></pre>

<p>注意: 要合并的数组的类型必须一致,如果不一致会出错. 比如:</p>

<pre><code>var arr0:[Any] = [1,2,3]
let arr1:[Any] = [&quot;2&quot;,3,4,5]
arr0 += arr1
print(arr0)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - 数组遍历]]></title>
    <link href="http://www.citynight.cn/Blog/14789442794521.html"/>
    <updated>2016-11-12T17:51:19+08:00</updated>
    <id>http://www.citynight.cn/Blog/14789442794521.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>最近没怎么更新,主要是最近刚入职新公司.正在熟悉环境中&hellip; 好了题目是<code>Swift - 数组遍历</code> 主要是项目要使用 Swift 开发,所以需要熟悉下语法.</p>
</blockquote>

<h2 id="toc_0">传统的下标遍历方法</h2>

<pre><code>let array = [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;]

// 第一种 下标遍历
for i in 0..&lt;array.count {
    print(array[i])
}
</code></pre>

<h2 id="toc_1">for in 遍历元素</h2>

<pre><code>// 第二种 for in 遍历元素
for s in array {
    print(s)
}
</code></pre>

<h2 id="toc_2">enum block遍历</h2>

<pre><code>// 第三种 enum block 遍历
for e in array.enumerated() {
    print(e)
}
</code></pre>

<p>结果:</p>

<pre><code>(0, &quot;张三&quot;)
(1, &quot;李四&quot;)
(2, &quot;王五&quot;)
</code></pre>

<p>我们可以看下e的类型&ndash;元组<br/>
<img src="media/14789442794521/14789449636069.jpg" alt=""/></p>

<h2 id="toc_3">元组方法遍历下标和内容</h2>

<p>由上面第三种方法我们可以知道 e 的类型是元组,那么同样我们可以直接使用元组</p>

<pre><code>// 第四种 元组使用
for (n,s) in array.enumerated() {
    print(&quot;\(n) \(s)&quot;)
}
</code></pre>

<p>结果:</p>

<pre><code>0 张三
1 李四
2 王五
</code></pre>

<h2 id="toc_4">反序遍历</h2>

<pre><code>// 第五种 反序遍历
for i in array.reversed() {
    print(i)
}
</code></pre>

<p>结果</p>

<pre><code>王五
李四
张三
</code></pre>

<h2 id="toc_5">反序遍历 带索引</h2>

<pre><code>// 第六种 反序遍历 带索引
for (n,s) in array.enumerated().reversed() {
    print(&quot;\(n) \(s)&quot;)
}
</code></pre>

<p>结果:</p>

<pre><code>2 王五
1 李四
0 张三
</code></pre>

<p>注意: <strong>先枚举再反序</strong></p>

<p>总结:Swift 太灵活了&hellip;</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[会议记录(培训)]]></title>
    <link href="http://www.citynight.cn/Blog/14787398225011.html"/>
    <updated>2016-11-10T09:03:42+08:00</updated>
    <id>http://www.citynight.cn/Blog/14787398225011.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Scrum 快速迭代与反馈</h2>

<p>快速迭代得到用户的反馈</p>

<h2 id="toc_1">scrum概念</h2>

<p>敏捷宣言:个体与交互 高于 流程与工具<br/>
工作的软件 高于 详尽的文档<br/>
客户合作 高于 合同谈判<br/>
相应变化 高于 遵循计划</p>

<p>在短时间内交付组稿价值的</p>

<p>Scrum框架  3 3 5 5</p>

<h3 id="toc_2">3个角色</h3>

<h4 id="toc_3">PO(Product owner)产品经理</h4>

<ul>
<li>一个人</li>
<li>产品决策</li>
<li>驱动产品走向成功</li>
<li>客户与团队的桥梁(双向的代表)</li>
<li>建立意愿</li>
<li>负责&quot;做什么&quot;</li>
<li>对Product Backlog 排优先级   (故事来表达条目,如果有其他的也可以)</li>
<li>决定发布日期</li>
<li>接受和退回工作成果</li>
</ul>

<h4 id="toc_4">开发团队  &ndash;&gt; 规模 = 7+-2</h4>

<p>能力:职能全(编码/测试),团队做一个项目<br/>
 职责:产品增量(完整的可以上线的产品)<br/>
 持续自我改进:所有成员都要有</p>

<h4 id="toc_5">SM(Sturm Master)</h4>

<ul>
<li>管理层与团队的桥梁(双向代表)</li>
<li>帮助团队做决定,自己不做决定</li>
<li>团队内部教练</li>
<li>开放并善于聆听</li>
<li>营造和推进Scrum价值观</li>
<li>帮助团队移除障碍</li>
<li>为PO和团队服务</li>
<li>培养和保护团队  保护团队不受打扰</li>
<li>提升管队效率</li>
</ul>

<h3 id="toc_6">3个工件(过程成果和交付物)</h3>

<h4 id="toc_7">Product Backlog</h4>

<ul>
<li>动态列表,包含产品功能(用户故事:)</li>
<li>其他能给用户带来的价值的工作(技术故事:一般由主设计由产品经理确认)</li>
<li>好的Product Backlog <strong>详细,规模估算,涌现式,优先级(绝对序号排序,不要用高中低)</strong></li>
<li>PO维护</li>
</ul>

<h4 id="toc_8">Sprint backlog</h4>

<ul>
<li>基于product backlog 拆分成更小的任务.关注与怎么做的问题</li>
<li><p>开发团队负责创建与维护</p>

<p><em>1</em> 选取要进行的Product backlog Item<br/>
<em>2</em> 协作完成<br/>
<em>3</em> 通过scrum任务版让团队自我管理Sprint Backlog<br/>
<em>4</em> 通过燃尽图跟踪sprint进展情况并预测和管理开发的进展</p>

<h4 id="toc_9">Sprint产品增量</h4></li>
<li><p>项目有一些列 sprint 组成</p></li>
<li><p>通常2-4周</p></li>
<li><p>固定周期    &ndash;&gt; 让开发团队适应节奏</p></li>
<li><p>时间盒结束sprint结束</p></li>
<li><p>计划会定义的工作要在sprint内全部完成</p></li>
</ul>

<h3 id="toc_10">5个活动</h3>

<h4 id="toc_11">Sprint计划会</h4>

<ul>
<li>第一部分:定义目标,选择可以承诺完成的任务(例如:主流程能跑通)</li>
<li>第二部分:决定如何实现目标,创建Sprint backlog估算(故事清单,按清单做)
####Daily Scrum 每日站立会</li>
<li>每日</li>
<li>相同时间地点</li>
<li>15分钟</li>
<li>站立 时间端,累 注意力集中</li>
<li>团队,+SM,PO</li>
</ul>

<h4 id="toc_12">迭代评审会</h4>

<ul>
<li>展示工作成果,获得客户反馈</li>
<li>PO接受或者回退工作</li>
<li>团队成员全部参家</li>
<li>邀请相关干系人</li>
</ul>

<h4 id="toc_13">迭代回顾会</h4>

<ul>
<li>团队开发过程会持续改进</li>
<li>最长3小时</li>
<li>全员参加,领导可以不参加</li>
<li>敏捷教练或者SM带领大家回顾</li>
<li>形成明确的改进计划,并在下一个迭代会回顾会检视效果</li>
</ul>

<h4 id="toc_14">把Scrum本身也做为一个活动</h4>

<h3 id="toc_15">5个价值观</h3>

<h2 id="toc_16">scrum拆解</h2>

<h1 id="toc_17">案例</h1>

<h2 id="toc_18">1.团队要敏捷,从哪里开始</h2>

<h3 id="toc_19">准备阶段</h3>

<p>团队组件:PO,SM(敏捷教练),开发团队(开发和测试不要很明确)</p>

<h3 id="toc_20">项目启动会</h3>

<h2 id="toc_21">2.git支管理办法</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装tree命令]]></title>
    <link href="http://www.citynight.cn/Blog/14781615036446.html"/>
    <updated>2016-11-03T16:25:03+08:00</updated>
    <id>http://www.citynight.cn/Blog/14781615036446.html</id>
    <content type="html"><![CDATA[
<p><code>brew</code> 一行命令搞定 <code>brew install tree</code></p>

<p>效果图:</p>

<pre><code>.
├── LICENSE
├── MKShowDetail
│   ├── MKShowDetail.h
│   ├── XZBaseViewController.h
│   ├── XZBaseViewController.m
│   ├── XZBaseViewController.xib
│   ├── XZCustomViewController.h
│   ├── XZCustomViewController.m
│   ├── XZTableView.h
│   ├── XZTableView.m
│   └── bgImage.gif
├── MKShowDetail.podspec
├── MKShowDetailDemo
│   ├── DetailShow
│   │   ├── AppDelegate.h
│   │   ├── AppDelegate.m
│   │   ├── Assets.xcassets
│   │   │   ├── AppIcon.appiconset
│   │   │   │   └── Contents.json
│   │   │   ├── Contents.json
│   │   │   └── icon.imageset
│   │   │       ├── Contents.json
│   │   │       └── icon.jpg
│   │   ├── Base.lproj
│   │   │   ├── LaunchScreen.storyboard
│   │   │   └── Main.storyboard
│   │   ├── Info.plist
│   │   ├── OneViewController.h
│   │   ├── OneViewController.m
│   │   ├── TestViewController.h
│   │   ├── TestViewController.m
│   │   ├── ThreeViewController.h
│   │   ├── ThreeViewController.m
│   │   ├── TwoViewController.h
│   │   ├── TwoViewController.m
│   │   ├── ViewController.h
│   │   ├── ViewController.m
│   │   ├── lol.jpg
│   │   ├── main.m
│   │   └── timo.jpg
│   └── DetailShow.xcodeproj
│       ├── project.pbxproj
│       ├── project.xcworkspace
│       │   ├── contents.xcworkspacedata
│       │   └── xcuserdata
│       │       ├── mekor.xcuserdatad
│       │       │   └── UserInterfaceState.xcuserstate
│       │       └── weizhi.xcuserdatad
│       │           └── UserInterfaceState.xcuserstate
│       └── xcuserdata
│           ├── mekor.xcuserdatad
│           │   └── xcschemes
│           │       ├── DetailShow.xcscheme
│           │       └── xcschememanagement.plist
│           └── weizhi.xcuserdatad
│               ├── xcdebugger
│               │   └── Breakpoints_v2.xcbkptlist
│               └── xcschemes
│                   ├── DetailShow.xcscheme
│                   └── xcschememanagement.plist
├── README.md
└── shopdetail.gif

</code></pre>

<p>看起来效果不错.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[获取当前显示的UIViewController]]></title>
    <link href="http://www.citynight.cn/Blog/14781433227076.html"/>
    <updated>2016-11-03T11:22:02+08:00</updated>
    <id>http://www.citynight.cn/Blog/14781433227076.html</id>
    <content type="html"><![CDATA[
<pre><code>+ (UIViewController *)getCurrentRootViewController {

    CommonTool *tool = [[CommonTool alloc]init];

    UIViewController *result;
    UIWindow *topWindow = [[UIApplication sharedApplication] keyWindow];

    if (topWindow.windowLevel != UIWindowLevelNormal){
        NSArray *windows = [[UIApplication sharedApplication] windows];
        for(topWindow in windows){
            if (topWindow.windowLevel == UIWindowLevelNormal)
                break;
        }
    }

    UIView *rootView = [topWindow subviews].firstObject;
    id nextResponder = [rootView nextResponder];

    if ([nextResponder isMemberOfClass:[UIViewController class]]){
        result = nextResponder;
    }
    else if ([nextResponder isMemberOfClass:[UITabBarController class]] | [nextResponder isMemberOfClass:[UINavigationController class]]){
        result = [tool findViewController:nextResponder];
    }
    else if ([topWindow respondsToSelector:@selector(rootViewController)] &amp;&amp; topWindow.rootViewController != nil){
        result = topWindow.rootViewController;
    }

    else{
        NSAssert(NO, @&quot;找不到顶端VC&quot;);
    }
    return result;
}

</code></pre>

<pre><code>- (UIViewController *)findViewController:(id)controller{
    if ([controller isMemberOfClass:[UINavigationController class]]) {
        return [self findViewController:[(UINavigationController *)controller visibleViewController]];
    }
    else if ([controller isMemberOfClass:[UITabBarController class]]){
        return [self findViewController:[(UITabBarController *)controller selectedViewController]];
    }
    else if ([controller isKindOfClass:[UIViewController class]]){
        return controller;
    }
    else{
        NSAssert(NO, @&quot;找不到顶端VC&quot;);
        return nil;
    }
}

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何获取手机上安装的所有App]]></title>
    <link href="http://www.citynight.cn/Blog/14778331858080.html"/>
    <updated>2016-10-30T21:13:05+08:00</updated>
    <id>http://www.citynight.cn/Blog/14778331858080.html</id>
    <content type="html"><![CDATA[
<pre><code>#include &lt;objc/runtime.h&gt; 

Class LSApplicationWorkspace_class = objc_getClass(&quot;LSApplicationWorkspace&quot;);
NSObject* workspace = [LSApplicationWorkspace_class performSelector:@selector(defaultWorkspace)];
NSLog(@&quot;apps: %@&quot;, [workspace performSelector:@selector(allApplications)]);
</code></pre>

<p>模拟器打印结果:</p>

<pre><code>apps: (
    &quot;&lt;LSApplicationProxy: 0x7fbd34603da0&gt; com.apple.appleaccount.AACredentialRecoveryDialog file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/AACredentialRecoveryDialog.app &lt;com.apple.appleaccount.AACredentialRecoveryDialog &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd383073a0&gt; com.apple.AccountAuthenticationDialog file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/AccountAuthenticationDialog.app &lt;com.apple.AccountAuthenticationDialog &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd38308a00&gt; com.apple.AdSheetPhone file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/AdSheet.app &lt;com.apple.AdSheetPhone &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd38308df0&gt; com.apple.Bridge file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Bridge.app &lt;com.apple.Bridge &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd38308fe0&gt; com.apple.camera file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Camera.app &lt;com.apple.camera &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34503d80&gt; com.apple.MobileAddressBook file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Contacts.app &lt;com.apple.MobileAddressBook &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34605980&gt; com.apple.CoreAuthUI file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/CoreAuthUI.app &lt;com.apple.CoreAuthUI &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd346062f0&gt; com.apple.DataActivation file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/DataActivation.app &lt;com.apple.DataActivation &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34606730&gt; com.apple.datadetectors.DDActionsService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/DDActionsService.app &lt;com.apple.datadetectors.DDActionsService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34606f60&gt; com.apple.FacebookAccountMigrationDialog file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/FacebookAccountMigrationDialog.app &lt;com.apple.FacebookAccountMigrationDialog &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd346074c0&gt; com.apple.gamecenter.GameCenterUIService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/GameCenterUIService.app &lt;com.apple.gamecenter.GameCenterUIService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34607b10&gt; com.apple.siri.parsec.HashtagImagesApp file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/HashtagImages.app &lt;com.apple.siri.parsec.HashtagImagesApp &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34608040&gt; com.apple.Health file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Health.app &lt;com.apple.Health &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd346085d0&gt; com.apple.HealthPrivacyService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/HealthPrivacyService.app &lt;com.apple.HealthPrivacyService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34608f70&gt; com.apple.Home.HomeUIService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/HomeUIService.app &lt;com.apple.Home.HomeUIService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd346093c0&gt; com.apple.iad.iAdOptOut file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/iAdOptOut.app &lt;com.apple.iad.iAdOptOut &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd346095b0&gt; com.apple.CloudKit.ShareBear file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/iCloud.app &lt;com.apple.CloudKit.ShareBear &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460a060&gt; com.apple.iCloudDriveApp file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/iCloudDriveApp.app &lt;com.apple.iCloudDriveApp &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460a4b0&gt; com.apple.LoginUI file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/LoginUI.app &lt;com.apple.LoginUI &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460a9f0&gt; com.apple.MailCompositionService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/MailCompositionService.app &lt;com.apple.MailCompositionService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460ae80&gt; com.apple.Maps file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Maps.app &lt;com.apple.Maps &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460b3e0&gt; com.apple.mobilesms.compose file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/MessagesViewService.app &lt;com.apple.mobilesms.compose &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460bb00&gt; com.apple.mobilecal file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/MobileCal.app &lt;com.apple.mobilecal &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460bf50&gt; com.apple.mobilesafari file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/MobileSafari.app &lt;com.apple.mobilesafari &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460c4e0&gt; com.apple.mobileslideshow file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/MobileSlideShow.app &lt;com.apple.mobileslideshow &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460c8d0&gt; com.apple.MobileSMS file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/MobileSMS.app &lt;com.apple.MobileSMS &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460cac0&gt; com.apple.MusicUIService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/MusicUIService.app &lt;com.apple.MusicUIService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460d520&gt; com.apple.news file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/News.app &lt;com.apple.news &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460dc70&gt; com.apple.Passbook file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Passbook.app &lt;com.apple.Passbook &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460e0c0&gt; com.apple.PassbookUIService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/PassbookUIService.app &lt;com.apple.PassbookUIService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460e510&gt; com.apple.PhotosViewService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/PhotosViewService.app &lt;com.apple.PhotosViewService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460eaf0&gt; com.apple.Preferences file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Preferences.app &lt;com.apple.Preferences &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460ece0&gt; com.apple.PrintKit.Print-Center file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Print%20Center.app &lt;com.apple.PrintKit.Print-Center &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460abe0&gt; com.apple.reminders file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Reminders.app &lt;com.apple.reminders &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460f790&gt; com.apple.SafariViewService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/SafariViewService.app &lt;com.apple.SafariViewService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd3460ffc0&gt; com.apple.ServerDocuments file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/ServerDocuments.app &lt;com.apple.ServerDocuments &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34610580&gt; com.apple.SharedWebCredentialViewService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/SharedWebCredentialViewService.app &lt;com.apple.SharedWebCredentialViewService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34610ab0&gt; com.apple.SharingViewService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/SharingViewService.app &lt;com.apple.SharingViewService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34610ca0&gt; com.apple.SiriViewService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/SiriViewService.app &lt;com.apple.SiriViewService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34610e90&gt; com.apple.social.SLGoogleAuth file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/SLGoogleAuth.app &lt;com.apple.social.SLGoogleAuth &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd345016b0&gt; com.apple.social.SLYahooAuth file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/SLYahooAuth.app &lt;com.apple.social.SLYahooAuth &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34501370&gt; com.apple.share file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/SocialUIService.app &lt;com.apple.share &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34507a80&gt; com.apple.ios.StoreKitUIService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/StoreKitUIService.app &lt;com.apple.ios.StoreKitUIService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34507c70&gt; com.apple.TencentWeiboAccountMigrationDialog file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/TencentWeiboAccountMigrationDialog.app &lt;com.apple.TencentWeiboAccountMigrationDialog &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34507e60&gt; com.apple.TrustMe file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/TrustMe.app &lt;com.apple.TrustMe &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd346123f0&gt; com.apple.VSViewService file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/VideoSubscriberAccountViewService.app &lt;com.apple.VSViewService &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34612c30&gt; com.apple.webapp file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/Web.app &lt;com.apple.webapp &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd346133b0&gt; com.apple.webapp1 file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/WebApp1.app &lt;com.apple.webapp1 &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34613fa0&gt; com.apple.WebContentFilter.remoteUI.WebContentAnalysisUI file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/WebContentAnalysisUI.app &lt;com.apple.WebContentFilter.remoteUI.WebContentAnalysisUI &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd34614930&gt; com.apple.WebSheet file:///Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/WebSheet.app &lt;com.apple.WebSheet &lt;installed &gt;&gt;&quot;,
    &quot;&lt;LSApplicationProxy: 0x7fbd346151b0&gt; cn.citynight.----- file:///Users/mekor/Library/Developer/CoreSimulator/Devices/F9CC59DD-6467-40E5-B0AE-F7EDDD22C612/data/Containers/Bundle/Application/0F126D14-F359-4D63-AEE7-B569519AC04F/%E5%85%91%E6%8D%A2%E5%88%B8%E6%B5%8B%E8%AF%95.app &lt;cn.citynight.----- &lt;installed &gt;&gt;&quot;
)

</code></pre>

<p>动态调用加上简单的混淆应该就可以了<br/>
上架要自己拼接字符串绕过审查</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算老虎机中奖等级-NSCountedSet]]></title>
    <link href="http://www.citynight.cn/Blog/14778318573153.html"/>
    <updated>2016-10-30T20:50:57+08:00</updated>
    <id>http://www.citynight.cn/Blog/14778318573153.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>NSCountedSet这个一直没有用过,看到其他人使用在此记录下.</p>
</blockquote>

<p>计算老虎机中奖等级的问题：老虎机有四列，每列四个图案，如果四个相同就是等级1，三个相同就是等级2，以此类推。说是用<code>if else</code>太麻烦，有没有什么比较快捷的方法，首先想到的是用KVC中剔除重复数据的办法。比如：</p>

<pre><code>NSArray *array = @[@2, @2, @2, @1];
NSLog(@&quot;%@&quot;, [array valueForKeyPath:@&quot;@distinctUnionOfObjects.self&quot;]);
</code></pre>

<p>然后得到数组的个数为2，看起来很合理，如果数组是<code>NSArray *array = @[@2, @1, @2, @1];</code>这时候计算出来的数组个数是也是2，但是正确结果应该是等级3，后来突然想起一个类:NSCountedSet</p>

<pre><code>    NSArray *array = @[@1, @2, @2, @1];
    NSCountedSet *set = [[NSCountedSet alloc]initWithArray:array];

    [set enumerateObjectsUsingBlock:^(id obj, BOOL *stop) {
        NSLog(@&quot;%@ =&gt; %d&quot;, obj, [set countForObject:obj]);
    }];

</code></pre>

<pre><code>1 =&gt; 2
2 =&gt; 2
</code></pre>

]]></content>
  </entry>
  
</feed>
